/*
 * OutputStepPanel.java
 *
 * Created on August 4, 2008, 11:41 AM
 */

package com.citigroup.liquifi.autopilot.gui;

import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import com.citigroup.liquifi.AutoPilotAppl;
import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.gui.model.CommonTagTableModel;
import com.citigroup.liquifi.autopilot.messaging.AutoPilotBrokerInfo;
import com.citigroup.liquifi.autopilot.socket.ClientSocket;
import com.citigroup.liquifi.entities.LFCommonOverwriteTag;
import com.citigroup.liquifi.entities.LFOutputMsg;
import com.citigroup.liquifi.entities.LFTemplate;
import com.citigroup.liquifi.util.AutoPilotConstants;
import com.citigroup.liquifi.util.DBUtil;
import java.util.ArrayList;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class OutputStepPanel extends javax.swing.JPanel implements TableModelListener {
	private static final long serialVersionUID = 1L;
	private LFOutputMsg currentOutputStep = null;
	
	public OutputStepPanel() {
		initDB();
		initComponents();
	}

	private void initDB() {
		templateMap = DBUtil.getInstance().getTem().getOutputTemplateMap();
		
		Map<String, AutoPilotBrokerInfo> topicList = ApplicationContext.getBrokerFactory().getAcceptorBrokerMapping();
		for(String topicID : topicList.keySet()) {
			topicName.add(topicID);
		}
		
		if (ApplicationContext.getSocketFactory() != null) {
			List<ClientSocket> sockets = ApplicationContext.getSocketFactory().getSockets();
			for(ClientSocket socket : sockets) {
				topicName.add(socket.getOutbound());
			}
		}
		
		Collections.sort(topicName);
		
		commonTagTableModel = ApplicationContext.getCommonTagTableModel();
		commonOverwriteTagMap = DBUtil.getInstance().getCom().getCommonOverwriteTagMap();
	}


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        stepNumTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        templateComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        msgIDTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        topicComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        useTemplateCheckBox = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        msgTypeComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        commonTagListComboBox = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        commonTagTable = new javax.swing.JTable();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.citigroup.liquifi.AutoPilotAppl.class).getContext().getResourceMap(OutputStepPanel.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        stepNumTextField.setEditable(false);
        stepNumTextField.setText(resourceMap.getString("stepNumTextField.text")); // NOI18N
        stepNumTextField.setName("stepNumTextField"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        templateComboBox.setModel(new javax.swing.DefaultComboBoxModel(DBUtil.getInstance().getTem().getOutputTemplateMap().keySet().toArray(new String[DBUtil.getInstance().getTem().getOutputTemplateMap().keySet().size()])));
        templateComboBox.setName("templateComboBox"); // NOI18N
        templateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        msgIDTextField.setEditable(false);
        msgIDTextField.setText(resourceMap.getString("msgIDTextField.text")); // NOI18N
        msgIDTextField.setName("msgIDTextField"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        topicComboBox.setModel(new javax.swing.DefaultComboBoxModel(topicName.toArray()));
        topicComboBox.setName("topicComboBox"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        messageTextArea.setColumns(20);
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(5);
        messageTextArea.setWrapStyleWord(true);
        messageTextArea.setName("messageTextArea"); // NOI18N
        jScrollPane1.setViewportView(messageTextArea);

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        useTemplateCheckBox.setSelected(true);
        useTemplateCheckBox.setText(resourceMap.getString("useTemplateCheckBox.text")); // NOI18N
        useTemplateCheckBox.setName("useTemplateCheckBox"); // NOI18N
        useTemplateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useTemplateCheckBoxActionPerformed(evt);
            }
        });


        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButton(evt);
            }
        });

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        msgTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FixMsg", "XML", "CONTROL", "JSON", "Others" }));
        msgTypeComboBox.setSelectedItem(templateMap.get((String)templateComboBox.getSelectedItem()).getMsgType());
        msgTypeComboBox.setName("msgTypeComboBox"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        commonTagListComboBox.setModel(new javax.swing.DefaultComboBoxModel((String[]) commonOverwriteTagMap.keySet().toArray(new String[commonOverwriteTagMap.keySet().size()])));
        commonTagListComboBox.addItem(AutoPilotConstants.EMPTY_COMBO_STRING);
        commonTagListComboBox.setName("commonTagListComboBox"); // NOI18N
        commonTagListComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commonTagListComboBoxActionPerformed(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        commonTagTable.setModel(commonTagTableModel);
        commonTagTable.setName("commonTagTable"); // NOI18N
        commonTagTable.getModel().addTableModelListener(this);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel> (commonTagTable.getModel());
        commonTagTable.setRowSorter(sorter);
        jScrollPane3.setViewportView(commonTagTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(40, 40, 40)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel1)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel3))
                .add(30, 30, 30)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 691, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(msgIDTextField)
                        .add(stepNumTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, topicComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, msgTypeComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, templateComboBox, 0, 339, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(saveButton)
                                .add(53, 53, 53)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(47, 47, 47)
                                .add(useTemplateCheckBox))
                            .add(layout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(jButton2)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 256, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(commonTagListComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(70, 70, 70)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stepNumTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .add(5, 5, 5)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(msgIDTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(templateComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(useTemplateCheckBox))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(msgTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(topicComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6))
                        .add(29, 29, 29)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(71, 71, 71)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton2)
                            .add(saveButton)))
                    .add(layout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(commonTagListComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jScrollPane3, 0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButton
    	ClearButton(evt);
    	
    	if(isNew) {
    		ApplicationContext.getTestcaseHelper().removeOutputStep(Integer.valueOf(msgIDTextField.getText())-1);
    	}
    	
		((AutoPilotApplView)AutoPilotAppl.getApplication().getMainView()).showMainPanel();
    }//GEN-LAST:event_CancelButton

    private void commonTagListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commonTagListComboBoxActionPerformed
        // TODO add your handling code here:
        List<LFCommonOverwriteTag> listTag = commonOverwriteTagMap.get(commonTagListComboBox.getSelectedItem());
        if (listTag != null ) {
            //set the list of CommonTag to the tableModel of the Tag grid
            Set <LFCommonOverwriteTag> setTag = new HashSet<LFCommonOverwriteTag> ();
            for (LFCommonOverwriteTag tagLocal: listTag) {
                setTag.add(tagLocal);
            }
            if(setTag != null){
                commonTagTableModel.getData().clear();
                commonTagTableModel.setData(setTag);
            }
        } else {
            commonTagTableModel.getData().clear();
            commonTagTableModel.setData(new LinkedHashSet<LFCommonOverwriteTag>());
        }
}//GEN-LAST:event_commonTagListComboBoxActionPerformed

    private void ClearButton(java.awt.event.ActionEvent evt) {                             
		messageTextArea.setText("");
		templateComboBox.setSelectedIndex(0);
		msgTypeComboBox.setSelectedIndex(0);
		topicComboBox.setSelectedIndex(0);
    }

    private void templateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    	String msgType = templateMap.get((String)templateComboBox.getSelectedItem()).getMsgType();
		msgTypeComboBox.setSelectedItem(msgType);
    }

	private void useTemplateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
		resetForm();
	}

	public void resetForm(){
		if(useTemplateCheckBox.isSelected()){
			messageTextArea.setEnabled(false);
			messageTextArea.setEditable(false);
			templateComboBox.setEnabled(true);
			msgTypeComboBox.setEnabled(false);			
		}else{
			messageTextArea.setEnabled(true);
			messageTextArea.setEditable(true);
			templateComboBox.setEnabled(false);
			msgTypeComboBox.setEnabled(true);	
		}
	}

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
		int index = Integer.parseInt(msgIDTextField.getText()) -1 ;

		if (index > -1 ){
			currentOutputStep.setActionSequence(Integer.parseInt(stepNumTextField.getText()));
			currentOutputStep.setOutputMsgID(Integer.parseInt(msgIDTextField.getText()));
			if(useTemplateCheckBox.isSelected()){
				currentOutputStep.setTemplate((String)templateComboBox.getSelectedItem());
			}else{
				currentOutputStep.setTemplate(null);
			}

			currentOutputStep.setTopicID((String)topicComboBox.getSelectedItem());
			currentOutputStep.setOutputMsg(messageTextArea.getText().replace("\n", ""));
			currentOutputStep.setMsgType((String)msgTypeComboBox.getSelectedItem());

			String commonTagSelection = (String)commonTagListComboBox.getSelectedItem();
			if(commonTagSelection.equals(AutoPilotConstants.EMPTY_COMBO_STRING)) {
				currentOutputStep.setCommonTags(null);
			} else {
				currentOutputStep.setCommonTags(commonTagSelection);
			}
			
			messageTextArea.setText("");
			
			// Update the row to contain the latest information
			ApplicationContext.getTestcaseHelper().updateOutputStep(currentOutputStep);
			
			// Have the new/updated row selected
			ApplicationContext.getTestcasePanel().getInputStepTable().setRowSelectionInterval(currentOutputStep.getActionSequence()-1, currentOutputStep.getActionSequence()-1);
			ApplicationContext.getTestcasePanel().getOutputStepTable().setRowSelectionInterval(currentOutputStep.getOutputMsgID()-1, currentOutputStep.getOutputMsgID()-1);
			
			((AutoPilotApplView)AutoPilotAppl.getApplication().getMainView()).showMainPanel();
		}
	}




	public void populateForm(LFOutputMsg outputMsg, boolean isNew) {
		this.isNew = isNew;
		currentOutputStep = outputMsg;
		stepNumTextField.setText(String.valueOf(outputMsg.getActionSequence()));
		msgIDTextField.setText(String.valueOf(outputMsg.getOutputMsgID()));
		messageTextArea.setText(outputMsg.getOutputMsg());
		
		if(outputMsg.getTemplate()!= null){
			for (int i =0; i< templateComboBox.getModel().getSize(); i++){
				if(outputMsg.getTemplate().equals((String)templateComboBox.getModel().getElementAt(i))){
					templateComboBox.setSelectedIndex(i);
					useTemplateCheckBox.setSelected(true);
					break;
				}
			}
		} else {
			if(isNew) {
				useTemplateCheckBox.setSelected(true);
			} else {
				useTemplateCheckBox.setSelected(false);
			}
			
		}

		if(outputMsg.getMsgType()!= null){
			for (int i =0; i< msgTypeComboBox.getModel().getSize(); i++){
				if(outputMsg.getMsgType().equals((String)msgTypeComboBox.getModel().getElementAt(i))){
					msgTypeComboBox.setSelectedIndex(i);
					break;
				}
			}
		}

		if(outputMsg.getTopicID() != null){
			for (int i =0; i< topicComboBox.getModel().getSize(); i++){
				if(outputMsg.getTopicID().equals((String)topicComboBox.getModel().getElementAt(i))){
					topicComboBox.setSelectedIndex(i);
					break;
				}
			}
		}
		
		if(outputMsg.getCommonTags() != null) {
			for (int i =0; i< commonTagListComboBox.getModel().getSize(); i++){
				if(outputMsg.getCommonTags().equals((String)commonTagListComboBox.getModel().getElementAt(i))){
					commonTagListComboBox.setSelectedIndex(i);
					break;
				}
			}
		} else {
			commonTagListComboBox.setSelectedItem(AutoPilotConstants.EMPTY_COMBO_STRING);
		}
		
		// Set defaults for new step
		if(isNew) {
			String selectedTemplate = (String)templateComboBox.getSelectedItem();
			String templateType = templateMap.get(selectedTemplate).getMsgType();
			
			for (int i =0; i< msgTypeComboBox.getModel().getSize(); i++){
				if(templateType.equals((String)msgTypeComboBox.getModel().getElementAt(i))){
					msgTypeComboBox.setSelectedIndex(i);
					break;
				}
			}
			
			commonTagListComboBox.setSelectedItem(AutoPilotConstants.EMPTY_COMBO_STRING);
		}
			
		resetForm();
	}
	
	public void resetTemplate(){
		templateComboBox.setModel(new javax.swing.DefaultComboBoxModel(DBUtil.getInstance().getTem().getOutputTemplateMap().keySet().toArray(new String[DBUtil.getInstance().getTem().getOutputTemplateMap().keySet().size()])));
	}

	public void resetCommonTags() {
		commonTagListComboBox.setModel(new javax.swing.DefaultComboBoxModel((String[]) commonOverwriteTagMap.keySet().toArray(new String[commonOverwriteTagMap.keySet().size()])));
		commonTagListComboBox.addItem(AutoPilotConstants.EMPTY_COMBO_STRING);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox commonTagListComboBox;
    private javax.swing.JTable commonTagTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextField msgIDTextField;
    private javax.swing.JComboBox msgTypeComboBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField stepNumTextField;
    private javax.swing.JComboBox templateComboBox;
    private javax.swing.JComboBox topicComboBox;
    private javax.swing.JCheckBox useTemplateCheckBox;
    // End of variables declaration//GEN-END:variables

	private ArrayList<String> topicName = new ArrayList<String>();
	private Map<String, LFTemplate> templateMap;
	private boolean isNew = true;
	private CommonTagTableModel commonTagTableModel;
	private Map <String, List<LFCommonOverwriteTag> > commonOverwriteTagMap = new TreeMap<String, List<LFCommonOverwriteTag>>();

	public void tableChanged(TableModelEvent tablemodelevent) {
		// TODO Auto-generated method stub
		
	}

}
