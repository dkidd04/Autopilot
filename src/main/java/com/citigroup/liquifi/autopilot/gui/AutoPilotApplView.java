/*
 * AutoPilotApplView.java
 */

package com.citigroup.liquifi.autopilot.gui;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SwingConstants;
import javax.swing.Timer;

import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;

import com.citigroup.liquifi.AutoPilotAppl;
import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.db.TopicManager;
import com.citigroup.liquifi.autopilot.gui.InputTestCasePanel.ValidationResponse;
import com.citigroup.liquifi.entities.LFTestCase;
import com.citigroup.liquifi.entities.LFTestInputSteps;
import com.citigroup.liquifi.util.DBUtil;
import com.citigroup.liquifi.util.XMLBuilder;

/**
 * The application's main frame.
 */
public class AutoPilotApplView extends FrameView {

	public AutoPilotApplView(SingleFrameApplication app) {
		super(app);

		initComponents();
		resetToolBar();

        // Fill test run panel by calling search
        ApplicationContext.getTestRunPanel().loadTestCases(true, true);

		// status bar initialization - message timeout, idle icon and busy animation, etc
		ResourceMap resourceMap = getResourceMap();
		int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
		messageTimer = new Timer(messageTimeout, new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				statusMessageLabel.setText("");
			}
		});
		messageTimer.setRepeats(false);
		for (int i = 0; i < busyIcons.length; i++) {
			busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
		}
		idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
		statusAnimationLabel.setIcon(idleIcon);
	}

	@Action 
	public void showAboutBox() {
		if (aboutBox == null) {
			JFrame mainFrame = AutoPilotAppl.getApplication().getMainFrame();
			aboutBox = new AutoPilotApplAboutBox(mainFrame);
			aboutBox.setLocationRelativeTo(mainFrame);
		}
		AutoPilotAppl.getApplication().show(aboutBox);
	}

    public void showSocketConnBox(){
        if (socketConnBox == null) {
			JFrame mainFrame = AutoPilotAppl.getApplication().getMainFrame();
			socketConnBox = new SocketConnectionBox(mainFrame);
			socketConnBox.setLocationRelativeTo(mainFrame);
		}
		AutoPilotAppl.getApplication().show(socketConnBox);
    }

    public void showSocketMessageSenderBox(){
        if (socketMsgSenderBox == null) {
			JFrame mainFrame = AutoPilotAppl.getApplication().getMainFrame();
			socketMsgSenderBox = new SocketMessageSenderBox(mainFrame);
			socketMsgSenderBox.setLocationRelativeTo(mainFrame);
		}
		AutoPilotAppl.getApplication().show(socketMsgSenderBox);
    }

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
    	defaultCursor = new Cursor(Cursor.DEFAULT_CURSOR);
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        saveToXMLMenuItem = new javax.swing.JMenuItem();
        saveToDBMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        prefMenuItem = new javax.swing.JMenuItem();
        inputMenu = new javax.swing.JMenu();
        templateMenuItem = new javax.swing.JMenuItem();
        CommonTagMenuItem = new javax.swing.JMenuItem();
        resultMenuItem = new javax.swing.JMenuItem();
        socketMenu = new javax.swing.JMenu();
        openCloseSocketMenuItem = new javax.swing.JMenuItem();
        sendMsgToSocketMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        toolBar = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        backButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        runPanelButton = new javax.swing.JButton();
        duplicateButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        playButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        saveDialog = new javax.swing.JDialog();
        msgLabel = new javax.swing.JTextField();
        msgLabel.setBorder(null);
        msgLabel.setOpaque(false);
        msgLabel.setEditable(false);
        okButton = new javax.swing.JButton();

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText("File");
        fileMenu.setName("fileMenu"); // NOI18N

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New...");
        newMenuItem.setName("newMenuItem"); // NOI18N
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setText("Open");
        openMenuItem.setName("openMenuItem"); // NOI18N
        fileMenu.add(openMenuItem);
        
        closeMenuItem.setText("Close");
        closeMenuItem.setName("closeMenuItem");
        fileMenu.add(closeMenuItem);
        closeMenuItem.addActionListener( new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		//
        		// Make sure that no test cases are running...then
        		// its ok to pop back up.
        		//
        		ApplicationContext.getTestcasePanel().stopCurrentTestCase("aborted");
        		setComponent(ApplicationContext.getTestRunPanel());
        	}
        }) ;

        saveToXMLMenuItem.setText("Save to XML...");
        saveToXMLMenuItem.setName("saveToXMLMenuItem"); // NOI18N
        saveToXMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToXMLMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveToXMLMenuItem);

        saveToDBMenuItem.setText("Save to DB...");
        saveToDBMenuItem.setName("saveToDBMenuItem"); // NOI18N
        saveToDBMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToDBMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveToDBMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.jdesktop.application.SingleFrameApplication.class).getContext().getActionMap(AutoPilotApplView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.setToolTipText("Edit");
        editMenu.setName("editMenu"); // NOI18N

        prefMenuItem.setText("Preferences...");
        prefMenuItem.setName("prefMenuItem"); // NOI18N
        prefMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(prefMenuItem);

        menuBar.add(editMenu);

        inputMenu.setText("Window");
        inputMenu.setName("inputMenu"); // NOI18N

        templateMenuItem.setText("Template");
        templateMenuItem.setName("templateMenuItem"); // NOI18N
        templateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateMenuItemActionPerformed(evt);
            }
        });
        inputMenu.add(templateMenuItem);

        CommonTagMenuItem.setText("CommonTag");
        CommonTagMenuItem.setName("CommonTagMenuItem"); // NOI18N
        CommonTagMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommonTagMenuItemActionPerformed(evt);
            }
        });
        inputMenu.add(CommonTagMenuItem);

        resultMenuItem.setText("Result");
        resultMenuItem.setName("resultMenuItem"); // NOI18N
        resultMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultMenuItemActionPerformed(evt);
            }
        });
        inputMenu.add(resultMenuItem);

        menuBar.add(inputMenu);

        socketMenu.setText("Socket");
        socketMenu.setName("socketMenu"); // NOI18N

        openCloseSocketMenuItem.setText("Open/Close Socket Connection");
        openCloseSocketMenuItem.setName("openCloseSocketMenuItem"); // NOI18N
        openCloseSocketMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCloseSocketMenuItemActionPerformed(evt);
            }
        });
        socketMenu.add(openCloseSocketMenuItem);

        sendMsgToSocketMenuItem.setText("Send Message to Socket");
        sendMsgToSocketMenuItem.setName("sendMsgToSocketMenuItem"); // NOI18N
        sendMsgToSocketMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMsgToSocketMenuItemActionPerformed(evt);
            }
        });
        socketMenu.add(sendMsgToSocketMenuItem);

        menuBar.add(socketMenu);

        helpMenu.setText("Help");
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1952, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1782, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel))
                .addGap(3, 3, 3))
        );

        toolBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        toolBar.setRollover(true);
        toolBar.setName("toolBar"); // NOI18N

        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/window_new-32.png"))); // NOI18N
        newButton.setToolTipText("New");
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setName("newButton"); // NOI18N
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        toolBar.add(newButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/save_all-32.png"))); // NOI18N
        saveButton.setToolTipText("Save");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setName("saveButton"); // NOI18N
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        toolBar.add(saveButton);

        jSeparator1.setName("jSeparator1"); // NOI18N
        toolBar.add(jSeparator1);

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/agt_back-32.png"))); // NOI18N
        backButton.setToolTipText("Back");
        backButton.setEnabled(false);
        backButton.setFocusable(false);
        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backButton.setName("backButton"); // NOI18N
        backButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        toolBar.add(backButton);

        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/forward-32.png"))); // NOI18N
        forwardButton.setToolTipText("Forward");
        forwardButton.setEnabled(false);
        forwardButton.setFocusable(false);
        forwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        forwardButton.setName("forwardButton"); // NOI18N
        forwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(forwardButton);

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/gohome-32.png"))); // NOI18N
        homeButton.setToolTipText("Home");
        homeButton.setFocusable(false);
        homeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        homeButton.setName("homeButton"); // NOI18N
        homeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        toolBar.add(homeButton);

        runPanelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/launch-32.png"))); // NOI18N
        runPanelButton.setToolTipText("Run Panel");
        runPanelButton.setFocusable(false);
        runPanelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runPanelButton.setName("runPanelButton"); // NOI18N
        runPanelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runPanelButtonActionPerformed(evt);
            }
        });
        toolBar.add(runPanelButton);

        duplicateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/editcopy-32.png"))); // NOI18N
        duplicateButton.setToolTipText("Duplicate");
        duplicateButton.setFocusable(false);
        duplicateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        duplicateButton.setName("duplicateButton"); // NOI18N
        duplicateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        duplicateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateButtonActionPerformed(evt);
            }
        });
        toolBar.add(duplicateButton);

        jSeparator2.setName("jSeparator2"); // NOI18N
        toolBar.add(jSeparator2);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/player_play-32.png"))); // NOI18N
        playButton.setToolTipText("Run testcase(s)");
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setName("playButton"); // NOI18N
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        toolBar.add(playButton);
        
        exportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/drop_test_case.png"))); // NOI18N
        exportButton.setToolTipText("Export selected testcase(s)");
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setName("exportButton"); // NOI18N
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
            
        });
        toolBar.add(exportButton);


        saveDialog.setName("saveDialog"); // NOI18N

        msgLabel.setText("Save Successful. Entry added to Database.");
        msgLabel.setName("msgLabel"); // NOI18N

        okButton.setText("OK");
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout saveDialogLayout = new javax.swing.GroupLayout(saveDialog.getContentPane());
        saveDialog.getContentPane().setLayout(saveDialogLayout);
        saveDialogLayout.setHorizontalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(saveDialogLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(msgLabel))
                    .addGroup(saveDialogLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(okButton)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        saveDialogLayout.setVerticalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(okButton)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        setComponent(ApplicationContext.getTestRunPanel());
        setMenuBar(menuBar);
        
        mnSettings = new JMenu("Settings");
        menuBar.add(mnSettings);
        
        mnPauseBeteenTest = new JMenu("Pause Between Test Cases");
        mnSettings.add(mnPauseBeteenTest);
        
        rdbtnmntmMs_0 = new JRadioButtonMenuItem("0 ms");
        rdbtnmntmMs_0.setSelected(true);
        rdbtnmntmMs_0.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		adjustPauseTimeActionPerformed(evt, 0);
        	}
        });
        mnPauseBeteenTest.add(rdbtnmntmMs_0);
        
        rdbtnmntmMs_300 = new JRadioButtonMenuItem("300 ms");
        rdbtnmntmMs_300.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		adjustPauseTimeActionPerformed(evt, 300);
        	}
        });
        mnPauseBeteenTest.add(rdbtnmntmMs_300);
        
        rdbtnmntmMs_500 = new JRadioButtonMenuItem("500 ms");
        rdbtnmntmMs_500.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		adjustPauseTimeActionPerformed(evt, 500);
        	}
        });
        mnPauseBeteenTest.add(rdbtnmntmMs_500);
        
        rdbtnmntmMs_1000 = new JRadioButtonMenuItem("1000 ms");
        rdbtnmntmMs_1000.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		adjustPauseTimeActionPerformed(evt, 1000);
        	}
        });
        mnPauseBeteenTest.add(rdbtnmntmMs_1000);
        
        mnTestCasesFolder = new JMenu("Test cases folder view");
        mnSettings.add(mnTestCasesFolder);
        
        rdbtnmntmEnable = new JRadioButtonMenuItem("Enable");
        rdbtnmntmEnable.setSelected(true);
        rdbtnmntmEnable.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		enableCaseFolderActionPerformed(evt);
        	}
        });
        mnTestCasesFolder.add(rdbtnmntmEnable);
        
        rdbtnmntmDisable = new JRadioButtonMenuItem("Disable");
        rdbtnmntmDisable.setSelected(false);
        rdbtnmntmDisable.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		disableCaseFolderActionPerformed(evt);
        	}
        });
        mnTestCasesFolder.add(rdbtnmntmDisable);
        
        mnTestCaseStep = new JMenu("Test Case Step Comments Tooltip");
        mnSettings.add(mnTestCaseStep);
        
        rdbtnmntmEnable_1 = new JRadioButtonMenuItem("Enable");
        rdbtnmntmEnable_1.setSelected(false);
        rdbtnmntmEnable_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		enableCommentsToolTipActionPerformed(evt);
        	}
        });
        mnTestCaseStep.add(rdbtnmntmEnable_1);
        
        rdbtnmntmDisable_1 = new JRadioButtonMenuItem("Disable");
        rdbtnmntmDisable_1.setSelected(true);
        rdbtnmntmDisable_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		disableCommentsToolTipActionPerformed(evt);
        	}
        });
        mnTestCaseStep.add(rdbtnmntmDisable_1);
        
        mntmTopicManager = new JMenuItem("Enable/Disable Topics");
        mntmTopicManager.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		topicManagerMenuItemActionPerformed(evt);
        	}
        });
        mnSettings.add(mntmTopicManager);
        
        setStatusBar(statusPanel);
        setToolBar(toolBar);
        
        clipboardButton = new JButton();
        clipboardButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		clipboardButtonActionPerformed(evt);
        	}
        });
        
        btnRerunFailedTest = new JButton();
        btnRerunFailedTest.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		reRunButtonActionPerformed(evt);
        	}
        });
        btnRerunFailedTest.setIcon(new ImageIcon(AutoPilotApplView.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/rerun.png")));
        btnRerunFailedTest.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnRerunFailedTest.setToolTipText("Re-run failed cases");
        btnRerunFailedTest.setName("playButton");
        btnRerunFailedTest.setHorizontalTextPosition(SwingConstants.CENTER);
        btnRerunFailedTest.setFocusable(false);
        toolBar.add(btnRerunFailedTest);
        clipboardButton.setIcon(new ImageIcon(AutoPilotApplView.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/clipboard_down.png")));
        clipboardButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        clipboardButton.setToolTipText("Create Clipboard For Testcase Steps");
        clipboardButton.setName("playButton");
        clipboardButton.setHorizontalTextPosition(SwingConstants.CENTER);
        clipboardButton.setFocusable(false);
        toolBar.add(clipboardButton);
    }// </editor-fold>//GEN-END:initComponents

    
	protected void topicManagerMenuItemActionPerformed(ActionEvent evt) {
		JFrame mainFrame = AutoPilotAppl.getApplication().getMainFrame();
		TopicManagerDialog topicManagerDialog = new TopicManagerDialog (mainFrame, false);
		topicManagerDialog.populateForm();
		AutoPilotAppl.getApplication().show(topicManagerDialog);
	}

	protected void reRunButtonActionPerformed(ActionEvent evt) {
		if (getComponent() == ApplicationContext.getTestRunPanel()){
			ApplicationContext.getTestRunPanel().setPauseTimeBetweenCases(pauseTimeBetweenCases);
			ApplicationContext.getTestRunPanel().rerun();
		}
		
	}

	protected void clipboardButtonActionPerformed(ActionEvent evt) {
		InputStepsClipboard clipBoard = new InputStepsClipboard(new javax.swing.JFrame(), false);
		ApplicationContext.getTestcasePanel().getClipboardsMap().put(clipBoard.getId(), clipBoard);
		clipBoard.setVisible(true);		
	}

	protected void enableCommentsToolTipActionPerformed(ActionEvent evt) {
		this.rdbtnmntmDisable_1.setSelected(false);
		this.rdbtnmntmEnable_1.setSelected(true);
		ApplicationContext.getTestcasePanel().toShowCommentsToolTip(true);		
	}

	protected void disableCommentsToolTipActionPerformed(ActionEvent evt) {
		this.rdbtnmntmEnable_1.setSelected(false);
		this.rdbtnmntmDisable_1.setSelected(true);
		ApplicationContext.getTestcasePanel().toShowCommentsToolTip(false);
	}

	protected void disableCaseFolderActionPerformed(ActionEvent evt) {
		this.rdbtnmntmEnable.setSelected(false);
		this.rdbtnmntmDisable.setSelected(true);
		ApplicationContext.getTestRunPanel().disableCaseFolder();
	}

	protected void enableCaseFolderActionPerformed(ActionEvent evt) {
		this.rdbtnmntmEnable.setSelected(true);
		this.rdbtnmntmDisable.setSelected(false);
		ApplicationContext.getTestRunPanel().enableCaseFolder();
	}

	protected void adjustPauseTimeActionPerformed(ActionEvent evt, int pauseTime) {
		rdbtnmntmMs_0.setSelected(false);
		rdbtnmntmMs_300.setSelected(false);
		rdbtnmntmMs_500.setSelected(false);
		rdbtnmntmMs_1000.setSelected(false);

		switch (pauseTime) {
			case 0:
				rdbtnmntmMs_0.setSelected(true);
				this.pauseTimeBetweenCases = 0;
				break;
			case 300:
				rdbtnmntmMs_300.setSelected(true);
				this.pauseTimeBetweenCases = 300;
				break;
			case 500:
				rdbtnmntmMs_500.setSelected(true);
				this.pauseTimeBetweenCases = 500;
				break;
			case 1000:
				rdbtnmntmMs_1000.setSelected(true);
				this.pauseTimeBetweenCases = 1000;
				break;
		}
	}

	private void CommonTagMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		setComponent(ApplicationContext.getInputCommonOverwriteTagPanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();
	}
	
	private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
	// TODO add your handling code here:
	}//GEN-LAST:event_backButtonActionPerformed
	
	private void openCloseSocketMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCloseSocketMenuItemActionPerformed
	    showSocketConnBox();
	}//GEN-LAST:event_openCloseSocketMenuItemActionPerformed
	
	private void sendMsgToSocketMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMsgToSocketMenuItemActionPerformed
	    showSocketMessageSenderBox();
	}//GEN-LAST:event_sendMsgToSocketMenuItemActionPerformed

	private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {
		if(getComponent() == ApplicationContext.getTestcasePanel()){
			ApplicationContext.getTestcasePanel().runTestcase();
		}else if (getComponent() == ApplicationContext.getTestRunPanel()){
			ApplicationContext.getTestRunPanel().setPauseTimeBetweenCases(pauseTimeBetweenCases);
			ApplicationContext.getTestRunPanel().run();
		}
	}
	
	private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {
		if(getComponent() == ApplicationContext.getTestcasePanel()){
			//ApplicationContext.getTestcasePanel().runTestcase();
		}else if (getComponent() == ApplicationContext.getTestRunPanel()){
			ApplicationContext.getTestRunPanel().exportTestCasesToCSV();
		}
	}


	private void resultMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		setComponent(ApplicationContext.getResultPanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();
	}

	private void duplicateButtonActionPerformed(java.awt.event.ActionEvent evt) {
		validateCaseChangesStatus();
		try {
			AutoPilotAppl.getApplication().getMainFrame().setCursor(hourglassCursor);

			String name = (String)JOptionPane.showInputDialog("Please enter the new testcase name:");

			if(name != null && !name.equals("")) {
				duplicateSelectedTestCase(name);
			}
		} finally {
			AutoPilotAppl.getApplication().getMainFrame().setCursor(defaultCursor);
		}
	}
	

	public void duplicateSelectedTestCase(String name) {
		if(getComponent() == ApplicationContext.getTestRunPanel()) {
			ApplicationContext.getTestRunPanel().updateInputTestCasePanelWithSelectedTestCase();
		}
		
		ValidationResponse response = ApplicationContext.getTestcasePanel().validateForm(); 
		
		if(!response.valid){
			msgLabel.setText(response.reason);
			AutoPilotAppl.getApplication().show(saveDialog);
			return;
		}

		ApplicationContext.getTestcasePanel().createDuplicateTestcase(name);
		save();

		((AutoPilotApplView)AutoPilotAppl.getApplication().getMainView()).showMainPanel();

		if(ApplicationContext.getConfig().isEnablePopup()) {
			msgLabel.setText(saveOkMsg);
			AutoPilotAppl.getApplication().show(saveDialog);
		}
	}

	private void prefMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		JFrame mainFrame = AutoPilotAppl.getApplication().getMainFrame();
		PreferenceDialog prefDialog = new PreferenceDialog (mainFrame, false);
		prefDialog.setLocationRelativeTo(mainFrame);
		AutoPilotAppl.getApplication().show(prefDialog);
	}

	private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {
		validateCaseChangesStatus();
		newMenuItemActionPerformed(evt);
	}

	private void runPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {
		validateCaseChangesStatus();
		setComponent(ApplicationContext.getTestRunPanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();
	}

	private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		showMainPanel();
	}

	private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		ApplicationContext.getTestcasePanel().createNewTestcase();
		showMainPanel();
	}

	private void templateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		setComponent(ApplicationContext.getTemplatePanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();
	}

	private void saveToXMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		LFTestCase testcase = constructTestCaseFromForm();
		XMLBuilder.saveToFile(testcase);
	}

	private void saveToDBMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		save();
	}

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
		saveDialog.setVisible(false);
	}

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			AutoPilotAppl.getApplication().getMainFrame().setCursor(hourglassCursor);
			save();
		} finally  {
			AutoPilotAppl.getApplication().getMainFrame().setCursor(defaultCursor);
		}
	}
	

	public void showInputStepPanel(){
		setComponent(ApplicationContext.getInputStepPanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();
	}

	public void showTestCasePanel(){
		setComponent(ApplicationContext.getTestcasePanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();
	}
	
	public void showMainPanel(){
		setComponent(ApplicationContext.getTestcasePanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();
	}

	public void showOutputStepPanel() {
		setComponent(ApplicationContext.getOutputStepPanel());
		resetToolBar();
		AutoPilotAppl.getApplication().show(this);
		AutoPilotAppl.getApplication().getMainFrame().repaint();

	}

	private LFTestCase constructTestCaseFromForm(){
		LFTestCase testcase = (ApplicationContext.getTestcasePanel()).getTestCase();
		return testcase;
	}


	private void save(){
		save(true);
	}
	
	private void save(boolean toShowSuccessDialog){
		try{
			// reset colored components to white
			ApplicationContext.getTestcasePanel().resetComponentColor();
			
			if (getComponent() == ApplicationContext.getTestcasePanel()){
				ValidationResponse response = ApplicationContext.getTestcasePanel().validateForm(); 
				if(!response.valid){
					msgLabel.setText(response.reason);
					AutoPilotAppl.getApplication().show(saveDialog);
				}else{
					LFTestCase testcase = constructTestCaseFromForm();
					String lastEditedUser = System.getProperty("user.name");
					testcase.setLastEditedUser(lastEditedUser); //update the last edited user
					ApplicationContext.getTestcasePanel().updateLastEditedUser(lastEditedUser);
					DBUtil.getInstance().updateDB(testcase);
					ApplicationContext.getTestcasePanel().updateCaseCategoryCount();
					if (ApplicationContext.getConfig().isEnablePopup() && toShowSuccessDialog) {
						msgLabel.setText(saveOkMsg);
						AutoPilotAppl.getApplication().show(saveDialog);
					}

					ApplicationContext.getTestRunPanel().loadTestCases(true, false, true);
					ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(true);
				}
			} else if (getComponent() == ApplicationContext.getTestRunPanel()){
				ValidationResponse response = ApplicationContext.getTestcasePanel().validateForm(); 
				if(!response.valid){
					msgLabel.setText(response.reason);
					AutoPilotAppl.getApplication().show(saveDialog);
				}else{
					LFTestCase testcase = constructTestCaseFromForm();
					String lastEditedUser = System.getProperty("user.name");
					testcase.setLastEditedUser(lastEditedUser); //update the last edited user
					ApplicationContext.getTestcasePanel().updateLastEditedUser(lastEditedUser);
					DBUtil.getInstance().updateDB(testcase);
					ApplicationContext.getTestRunPanel().loadTestCases(true, false, true);
					ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(true);

				}
			}
		}catch(Exception e){
			e.printStackTrace();
			msgLabel.setText(saveFailMsg);
			AutoPilotAppl.getApplication().show(saveDialog);
		}

	}

	private void resetToolBar(){
		if (getComponent() == ApplicationContext.getTestcasePanel()) {
			duplicateButton.setEnabled(true);
			saveButton.setEnabled(true);
			playButton.setEnabled(true);
			exportButton.setEnabled(true);
			homeButton.setEnabled(false);
		} else if (getComponent() == ApplicationContext.getInputStepPanel()) {
			duplicateButton.setEnabled(false);
			saveButton.setEnabled(false);
			playButton.setEnabled(false);
			exportButton.setEnabled(false);
			homeButton.setEnabled(true);
		} else if (getComponent() == ApplicationContext.getTestRunPanel()) {
			duplicateButton.setEnabled(true);
			homeButton.setEnabled(true);
			saveButton.setEnabled(false);
			playButton.setEnabled(true);
			exportButton.setEnabled(true);
		} else if (getComponent() == ApplicationContext.getTestcasePanel()) {
			homeButton.setEnabled(false);
			duplicateButton.setEnabled(true);
			saveButton.setEnabled(true);
		} else if (getComponent() == ApplicationContext.getResultPanel()) {
			playButton.setEnabled(false);
			exportButton.setEnabled(false);
			homeButton.setEnabled(true);
			duplicateButton.setEnabled(false);
			saveButton.setEnabled(false);
		} else {
			duplicateButton.setEnabled(false);
			saveButton.setEnabled(false);
			playButton.setEnabled(false);
			exportButton.setEnabled(false);
			homeButton.setEnabled(true);
		}

	}

	private void validateCaseChangesStatus(){
		if(!ApplicationContext.getTestcaseHelper().isTestCaseChangesSaved()){
			String promptMsg = "The changes you made to this case test are NOT saved, would you like to save your changes?";
			String dialogTitle = "Want To Save Your Changes?";
			Object[] options = {"Yes", "No"};

			int n = JOptionPane.showOptionDialog(AutoPilotAppl.getApplication().getMainFrame(), promptMsg, dialogTitle,
				    	    JOptionPane.YES_NO_CANCEL_OPTION,
				    	    JOptionPane.QUESTION_MESSAGE,
				    	    null,
				    	    options,
				    	    options[0]);

			if(n == 0){
				try {
					AutoPilotAppl.getApplication().getMainFrame().setCursor(hourglassCursor);
					save(false);
				} finally  {
					AutoPilotAppl.getApplication().getMainFrame().setCursor(defaultCursor);
				}
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CommonTagMenuItem;
    private javax.swing.JButton backButton;
    private javax.swing.JButton duplicateButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JMenu inputMenu;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField msgLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton okButton;
    private javax.swing.JMenuItem openCloseSocketMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JButton playButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JMenuItem prefMenuItem;
    private javax.swing.JButton runPanelButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JDialog saveDialog;
    private javax.swing.JMenuItem saveToDBMenuItem;
    private javax.swing.JMenuItem saveToXMLMenuItem;
    private javax.swing.JMenuItem sendMsgToSocketMenuItem;
    private javax.swing.JMenu socketMenu;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenuItem templateMenuItem;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

	private final Timer messageTimer;
	private final Icon idleIcon;
	private final Icon[] busyIcons = new Icon[15];
	private JDialog aboutBox;
    private JDialog socketConnBox;
    private JDialog socketMsgSenderBox;
	private final String saveOkMsg = "Save Successful. Entry added to Database!";
	private final String saveFailMsg = "ERROR: Save Failed. Please check entry and Logs";
	private Cursor hourglassCursor;
	private Cursor defaultCursor;
	private JMenuItem resultMenuItem;

	private int pauseTimeBetweenCases;
	private JMenu mnSettings;
	private JMenu mnPauseBeteenTest;
	private JRadioButtonMenuItem rdbtnmntmMs_300;
	private JRadioButtonMenuItem rdbtnmntmMs_500;
	private JRadioButtonMenuItem rdbtnmntmMs_1000;
	private JRadioButtonMenuItem rdbtnmntmMs_0;
	private JMenu mnTestCasesFolder;
	private JRadioButtonMenuItem rdbtnmntmEnable;
	private JRadioButtonMenuItem rdbtnmntmDisable;
	private JMenu mnTestCaseStep;
	private JRadioButtonMenuItem rdbtnmntmEnable_1;
	private JRadioButtonMenuItem rdbtnmntmDisable_1;
	private JButton clipboardButton;
	private JButton btnRerunFailedTest;
	private JMenuItem mntmTopicManager;


}
