package com.citigroup.liquifi.autopilot.gui;

/*
 * PreferenceDialog.java
 *
 * Created on September 22, 2008, 12:15 PM
 */

import com.citigroup.liquifi.AutoPilotAppl;
import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.controller.ValidationObject;
import com.citigroup.liquifi.autopilot.gui.TestRunPanel.TableTransferHandler;
import com.citigroup.liquifi.autopilot.gui.model.ResultTableModel;
import com.citigroup.liquifi.autopilot.logger.AceLogger;
import com.citigroup.liquifi.entities.LFTestCase;
import com.citigroup.liquifi.util.DBUtil;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JTable;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.swing.ImageIcon;

/**
 *
 * @author  yh95657
 */
public class TestResultsDialog extends javax.swing.JDialog {
	private static final long serialVersionUID = 1L;
	private AceLogger logger = AceLogger.getLogger(this.getClass().getSimpleName());
	private JTable passedCasesTable;
	private JTable failedCasesTable;
	private JScrollPane scrollPane;
	private JScrollPane scrollPane_1;
	private JLabel lblPassedCases;
	private JLabel lblFailedCases;
	private JButton btnClose;
	private ResultTableModel failedCasesTableModel = new ResultTableModel();
	private ResultTableModel passedCasesTableModel = new ResultTableModel();
	private ArrayList<ValidationObject> passedCases = new ArrayList<ValidationObject>();
	private ArrayList<ValidationObject> failedCases = new ArrayList<ValidationObject>();
	

	/** Creates new form PreferenceDialog */
	public TestResultsDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		setTitle("Results");
		initComponents();
		init();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);
        
        scrollPane = new JScrollPane();
        
        scrollPane_1 = new JScrollPane();
        
        lblPassedCases = new JLabel("Passed Cases");
        lblPassedCases.setIcon(new ImageIcon(TestResultsDialog.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/tick-glow.png")));
        
        lblFailedCases = new JLabel("Failed Cases");
        lblFailedCases.setIcon(new ImageIcon(TestResultsDialog.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/cross-glow.png")));
        
        btnClose = new JButton("Close");
        btnClose.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		dispose();
        	}
        });
        
        JButton btnSaveResults = new JButton("Save Results");
        btnSaveResults.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		btnSaveResultsActionPerformed(evt);
        	}
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(23)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblPassedCases)
        						.addComponent(lblFailedCases)
        						.addComponent(scrollPane_1, GroupLayout.PREFERRED_SIZE, 381, GroupLayout.PREFERRED_SIZE)
        						.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 380, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(124)
        					.addComponent(btnClose)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(btnSaveResults)))
        			.addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(lblPassedCases)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 243, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
        			.addComponent(lblFailedCases)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(scrollPane_1, GroupLayout.PREFERRED_SIZE, 238, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnClose)
        				.addComponent(btnSaveResults))
        			.addGap(18))
        );
        
        failedCasesTable = new JTable();
        failedCasesTable = new javax.swing.JTable();
        failedCasesTable.setRowSelectionAllowed(true);
        failedCasesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        failedCasesTable.setModel(failedCasesTableModel);
        failedCasesTable.setName("failedCasesTable"); // NOI18N
        TableRowSorter<TableModel> failedCasesSorter = new TableRowSorter<TableModel> (failedCasesTable.getModel());
        failedCasesTable.setRowSorter(failedCasesSorter);
        failedCasesTable.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		if(e.getClickCount() == 2) {
        			doubleClickFailedTestCasePerformed(e);
        		}
        	}
        });
        
        
        scrollPane_1.setViewportView(failedCasesTable);
        
        passedCasesTable = new JTable();
        passedCasesTable = new javax.swing.JTable();
        passedCasesTable.setRowSelectionAllowed(true);
        passedCasesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        passedCasesTable.setModel(passedCasesTableModel);
        passedCasesTable.setName("passedCasesTable"); // NOI18N
        TableRowSorter<TableModel> passedCasesSorter = new TableRowSorter<TableModel> (passedCasesTable.getModel());
        passedCasesTable.setRowSorter(passedCasesSorter);
        passedCasesTable.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		if(e.getClickCount() == 2) {
        			doubleClickPassedTestCasePerformed(e);
        		}
        	}
        });
        
        scrollPane.setViewportView(passedCasesTable);
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	protected void btnSaveResultsActionPerformed(ActionEvent evt) {
		JFileChooser fc = new JFileChooser();
		FileFilter filter = new FileNameExtensionFilter("CSV file", "csv");
		fc.addChoosableFileFilter(filter);
		int returnVal = fc.showOpenDialog(AutoPilotAppl.getApplication().getMainFrame()); //Where frame is the parent component
		File file = null;
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			if(fc.getSelectedFile().getPath().contains(".csv")){
				file = fc.getSelectedFile();
			}else{
				file = new File(fc.getSelectedFile().getPath() + ".csv");
			}
		    
			outputTestResultToFile(file);
		    
		} else {
		    //User did not choose a valid file
		}

		
	}
	
	protected void outputTestResultToFile(File file){
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Calendar cal = Calendar.getInstance();
		String date = dateFormat.format(cal.getTime());
		
		 try {
				BufferedWriter bw = new BufferedWriter(new FileWriter(file));
				String userName = System.getProperty("user.name");
				bw.write("Run By (SOEID)," + userName + "\r\n");
				bw.write("Test Date," + date + "\r\n");
				bw.write("Total Number of Tests," + (passedCases.size() + failedCases.size()) + "\r\n");
				bw.write("Number of Passed Tests," + passedCases.size() + "\r\n");
				bw.write("Number of Failed Tests," + failedCases.size() + "\r\n");
				bw.write("\r\nResult,TestID,Test Case Name,Label,"
						+ "Category,Region,Release Num, "
						+ "Test Date, "
						+ "JIRA#,FailedStepID,Reason \r\n");
				
				for(ValidationObject pcase : passedCases){
					String labelArrayString = DBUtil.getInstance().getLbm().getLabelNames(pcase.getTestcase().getTestID()); // find all labels that the test belong to
					bw.write("Passed," + pcase.getTestcase().getTestID() + "," + pcase.getTestcase().getName() + "," + labelArrayString + "," + pcase.getTestcase().getCategory() + "," + pcase.getTestcase().getRegion() + "," + pcase.getTestcase().getReleaseNum() + "," + date + "," + pcase.getTestcase().getJiraNum() + "\r\n");
				}
				for(ValidationObject fcase : failedCases){
					
					LFTestCase testcase = fcase.getTestcase();
					String labelArrayString = DBUtil.getInstance().getLbm().getLabelNames(testcase.getTestID()); // find all labels that the test belong to
					bw.write("Failed," + 
					testcase.getTestID() + "," + 
					testcase.getName() + "," + 
					labelArrayString + "," + 
					testcase.getCategory() + "," + 
					testcase.getRegion() + "," + 
					testcase.getReleaseNum() + "," + 
					date + "," + 
					testcase.getJiraNum() + ","+
					fcase.getFailedInputStep() + "."+
					fcase.getFailedOutputMsgID()+ "," +
					fcase.getValidationResultMsg() + "\r\n");
				}
				
				bw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		    //Now you have your file to do whatever you want to do
	}
	
	protected void doubleClickPassedTestCasePerformed(MouseEvent e) {
		viewSelectedPassedTestCase();
	}
	
	private void viewSelectedPassedTestCase() {
		updateInputTestCasePanelWithSelectedPassedTestCase();
		((AutoPilotApplView)AutoPilotAppl.getApplication().getMainView()).showMainPanel();
	}

	public void updateInputTestCasePanelWithSelectedPassedTestCase() {
		InputTestCasePanel inputTestCasePanel = ApplicationContext.getTestcasePanel();
		ValidationObject testcase = passedCases.get(passedCasesTable.convertRowIndexToModel(passedCasesTable.getSelectedRow()));
		inputTestCasePanel.setTestcase(testcase.getTestcase());
	}

	protected void doubleClickFailedTestCasePerformed(MouseEvent e) {
		viewSelectedFailedTestCase();
		
	}
	
	private void viewSelectedFailedTestCase() {
		updateInputTestCasePanelWithSelectedFailedTestCase();
		((AutoPilotApplView)AutoPilotAppl.getApplication().getMainView()).showMainPanel();
	}

	public void updateInputTestCasePanelWithSelectedFailedTestCase() {
		InputTestCasePanel inputTestCasePanel = ApplicationContext.getTestcasePanel();
		ValidationObject testcase = failedCases.get(failedCasesTable.convertRowIndexToModel(failedCasesTable.getSelectedRow()));
		inputTestCasePanel.setTestcase(testcase.getTestcase());
	}

	public void init(){
		// bb load of bull!
		/*AutoPilotBrokerInfoFactory topicFactory = ApplicationContext.getBrokerFactory();
		AutoPilotBrokerInfo brokerInfo = topicFactory.getInitiatorBroker(AutoPilotConstants.MSG_TYPE_FIXMSG);
		topicIDTextField1.setText(brokerInfo.getTopicID());
		brokerTextField1.setText(brokerInfo.getBrokerURL());
		topicTextField1.setText(brokerInfo.getDestination());
		
		List<AutoPilotBrokerInfo> acceptorBrokerInfoList = topicFactory.getAcceptorBrokerList();
		AutoPilotBrokerInfo acceptor1 = acceptorBrokerInfoList.get(0);
		topicIDTextField2.setText(acceptor1.getTopicID());
		brokerTextField2.setText(acceptor1.getBrokerURL());
		topicTextField2.setText(acceptor1.getDestination());
		
		AutoPilotBrokerInfo acceptor2 = acceptorBrokerInfoList.get(1);
		topicIDTextField3.setText(acceptor2.getTopicID());
		brokerTextField3.setText(acceptor2.getBrokerURL());
		topicTextField3.setText(acceptor2.getDestination());
		*/
		ApplicationContext.getSecurityTableModel().setData(ApplicationContext.getConfig().getDefaultSymbolMap());
		//ApplicationContext.getSystemTableModel().setData(ApplicationContext.getConfig().getSystemProperty());
	}
	
	
	public void populateResultTables(List<ValidationObject> s){
		failedCasesTableModel.getData().clear();
		passedCasesTableModel.getData().clear();
		for(ValidationObject testcase : s){
			if(!testcase.isSuccess()){
				failedCasesTableModel.addRow(testcase.getTestcase());
				failedCases.add(testcase);
			}else{
				passedCasesTableModel.addRow(testcase.getTestcase());
				passedCases.add(testcase);
			}
		}
		passedCasesTableModel.fireTableDataChanged();
		failedCasesTableModel.fireTableDataChanged();
	}


	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				TestResultsDialog dialog = new TestResultsDialog(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
}
