/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SocketConnectionBox.java
 *
 * Created on Jul 21, 2009, 12:27:36 PM
 */

package com.citigroup.liquifi.autopilot.gui;

import java.awt.Color;
import java.util.HashMap;
import java.util.Map;

import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.messaging.SocketConnectionInfo;
import com.citigroup.liquifi.autopilot.socket.ClientNioSocket;

/**
 *
 * @author zy63334
 */
public class SocketConnectionBox extends javax.swing.JDialog {
	private static final long serialVersionUID = 1L;
	/** Creates new form SocketConnectionBox */
    public SocketConnectionBox(java.awt.Frame parent) {
        super(parent);
        initComponents();
        for (SocketConnectionInfo socket : ApplicationContext.getSocketFactory().getSocketList()){
            socketStatus.put(socket.getSocketID(), false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusButtonGroup = new javax.swing.ButtonGroup();
        connectButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        connectedRadioButton = new javax.swing.JRadioButton();
        messageLabel = new javax.swing.JLabel();
        notConnectedRadioButton = new javax.swing.JRadioButton();
        socketIDLabel = new javax.swing.JLabel();
        socketIDComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.jdesktop.application.SingleFrameApplication.class).getContext().getResourceMap(SocketConnectionBox.class);
        setTitle(resourceMap.getString("Socket Connection .title")); // NOI18N
        setName("Socket Connection "); // NOI18N
        setResizable(false);

        connectButton.setText(resourceMap.getString("connectButton.text")); // NOI18N
        connectButton.setName("connectButton"); // NOI18N
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        statusLabel.setText(resourceMap.getString("statusLabel.text")); // NOI18N
        statusLabel.setName("statusLabel"); // NOI18N

        statusButtonGroup.add(connectedRadioButton);
        connectedRadioButton.setText(resourceMap.getString("connectedRadioButton.text")); // NOI18N
        connectedRadioButton.setEnabled(false);
        connectedRadioButton.setName("connectedRadioButton"); // NOI18N

        messageLabel.setFont(resourceMap.getFont("messageLabel.font")); // NOI18N
        messageLabel.setText(resourceMap.getString("messageLabel.text")); // NOI18N
        messageLabel.setName("messageLabel"); // NOI18N

        statusButtonGroup.add(notConnectedRadioButton);
        notConnectedRadioButton.setSelected(true);
        notConnectedRadioButton.setText(resourceMap.getString("notConnectedRadioButton.text")); // NOI18N
        notConnectedRadioButton.setEnabled(false);
        notConnectedRadioButton.setName("notConnectedRadioButton"); // NOI18N

        socketIDLabel.setText(resourceMap.getString("socketIDLabel.text")); // NOI18N
        socketIDLabel.setName("socketIDLabel"); // NOI18N

        if (ApplicationContext.getSocketFactory() != null) {
        	socketIDComboBox.setModel(new javax.swing.DefaultComboBoxModel(ApplicationContext.getSocketFactory().getSocketIDArray()));
        }
        
        socketIDComboBox.setName("socketIDComboBox"); // NOI18N
        socketIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                socketIDComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(socketIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(connectedRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(notConnectedRadioButton))
                            .addComponent(socketIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(socketIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(socketIDLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(connectedRadioButton)
                    .addComponent(notConnectedRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
       
    	ClientNioSocket socket = null;
        String socketID = (String) socketIDComboBox.getSelectedItem();
        boolean connected = socketStatus.get(socketID);
        if (!connected) {
            SocketConnectionInfo socketInfo = ApplicationContext.getSocketFactory().getSocketConnByID(socketID);
            String server = socketInfo.getHost();
            int port = Integer.parseInt(socketInfo.getPort());
            socket = new ClientNioSocket(server, port);
            currentConnection = socket;
            connected = socket.connect(socketID);

            if (connected) {
                messageLabel.setForeground(Color.blue);
                messageLabel.setText("Connected to socket");
                Thread t = new Thread(socket);
                t.start();
                connectedRadioButton.setSelected(true);
                connectButton.setText("Disconnect");
            } else {
                messageLabel.setForeground(Color.red);
                messageLabel.setText(" Unable connect to socket ...");
                notConnectedRadioButton.setSelected(true);
                connectButton.setText("Connect");
            }

        } else {
            currentConnection.setStopThread(true);
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            currentConnection.disconnect();
            connected = false;

            messageLabel.setForeground(Color.blue);
            messageLabel.setText(" Disconnected from socket ...");
            notConnectedRadioButton.setSelected(true);
            connectButton.setText("Connect");
        }

        socketStatus.put(socketID, connected);
        
        
        
    }//GEN-LAST:event_connectButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void socketIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_socketIDComboBoxActionPerformed

        String socketID = (String) socketIDComboBox.getSelectedItem();
        messageLabel.setText("");
        boolean connected = socketStatus.get(socketID);

        if(connected){
            connectedRadioButton.setSelected(true);
            connectButton.setText("Disconnect");
        }else{
            notConnectedRadioButton.setSelected(true);
            connectButton.setText("Connect");
        }

        
    
        // TODO add your handling code here:
    }//GEN-LAST:event_socketIDComboBoxActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SocketConnectionBox dialog = new SocketConnectionBox(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JRadioButton connectedRadioButton;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JRadioButton notConnectedRadioButton;
    private javax.swing.JComboBox socketIDComboBox;
    private javax.swing.JLabel socketIDLabel;
    private javax.swing.ButtonGroup statusButtonGroup;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    
    private Map<String, Boolean> socketStatus = new HashMap<String, Boolean>();
    private ClientNioSocket currentConnection;

}
