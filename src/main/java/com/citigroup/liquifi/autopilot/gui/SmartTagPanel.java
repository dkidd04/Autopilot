/*
 * inputStepPanel.java
 *
 * Created on July 31, 2008, 11:57 AM
 */

package com.citigroup.liquifi.autopilot.gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import com.citigroup.liquifi.AutoPilotAppl;
import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.gui.model.CommonTagTableModel;
import com.citigroup.liquifi.autopilot.messaging.AutoPilotBrokerInfo;
import com.citigroup.liquifi.autopilot.socket.ClientSocket;
import com.citigroup.liquifi.entities.LFCommonOverwriteTag;
import com.citigroup.liquifi.entities.LFOutputMsg;
import com.citigroup.liquifi.entities.LFOutputTag;
import com.citigroup.liquifi.entities.LFTag;
import com.citigroup.liquifi.entities.LFTemplate;
import com.citigroup.liquifi.entities.LFTestInputSteps;
import com.citigroup.liquifi.entities.Step;
import com.citigroup.liquifi.util.AutoPilotConstants;
import com.citigroup.liquifi.util.DBUtil;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JSeparator;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import java.awt.event.ActionListener;

public class SmartTagPanel extends javax.swing.JPanel implements TableModelListener{

	private static final long serialVersionUID = 1L;
	public SmartTagPanel() {
		initComponents();
	}


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveDialog = new javax.swing.JDialog();
        msgLabel = new javax.swing.JLabel();
        inputStepNumLabel = new javax.swing.JLabel();
        inputStepNumTextField = new javax.swing.JTextField();
        tagTypeLabel = new javax.swing.JLabel();
        tagTypeComboBox = new javax.swing.JComboBox();
        tagTypeContentLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        saveDialog.setName("saveDialog"); // NOI18N

        //org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.citigroup.liquifi.AutoPilotAppl.class).getContext().getResourceMap(InputStepPanel.class);
        msgLabel.setText("Save Successful. Entry added to Database.");
        msgLabel.setName("msgLabel"); // NOI18N

        javax.swing.GroupLayout saveDialogLayout = new javax.swing.GroupLayout(saveDialog.getContentPane());
        saveDialog.getContentPane().setLayout(saveDialogLayout);
        saveDialogLayout.setHorizontalGroup(
                saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(saveDialogLayout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addComponent(msgLabel)
                            .addGap(113, 113, 113)
                .addContainerGap(36, Short.MAX_VALUE)))
        );
        saveDialogLayout.setVerticalGroup(
                saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(saveDialogLayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        setName("Form"); // NOI18N

        inputStepNumLabel.setText("Input Step #"); // NOI18N
        inputStepNumLabel.setName("jLabel1"); // NOI18N

        inputStepNumTextField.setEditable(false);
        inputStepNumTextField.setText("stepNumTextField"); // NOI18N
        inputStepNumTextField.setName("stepNumTextField"); // NOI18N

        tagTypeLabel.setText("Tag Type"); // NOI18N
        tagTypeLabel.setName("jLabel2"); // NOI18N

        String[] tagTypeOptions = new String[] { "Other", "ClientID", "Side", "OrderPrice", "OrderQuanity", "FarPrice", "NearPrice", "Reference To Input Step", "Reference To Output Step", "ExpireTime", "OrderID", "Price Of This(Last) Fill", "Qty On This(Last) Fill"  };
        tagTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(tagTypeOptions));
        tagTypeComboBox.setName("tagTypeComboBox"); // NOI18N
        tagTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagTypeComboBoxActionPerformed(evt);
            }
        });

        tagTypeContentLabel.setText("Tag Type Content"); // NOI18N
        tagTypeContentLabel.setName("jLabel3");

        addButton.setText("Add Tag"); // NOI18N
        addButton.setName("saveButton"); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear"); // NOI18N
        clearButton.setName("clearButton"); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel"); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        
        tagValueLabel = new JLabel("Tag Value");
        
        tagValueComboBox = new JComboBox();
        tagValueComboBox.setName("templateComboBox");
        String[] tagValueOptions = new String[] { "Other", "Get Tag Value From Referenced Step", "Remove Tag from Msg"};
        tagValueComboBox.setModel(new javax.swing.DefaultComboBoxModel(tagValueOptions));
        tagValueComboBox.setName("tagValueComboBox"); // NOI18N
        tagValueComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagValueComboBoxActionPerformed(evt);
            }
        });
        
        tagValueContentLabel = new JLabel();
        tagValueContentLabel.setText("Tag Value Content");
        tagValueContentLabel.setName("jLabel3");
        
        optionalLabel1 = new JLabel();
        optionalLabel1.setText("Input Step #");
        optionalLabel1.setName("jLabel3");
        optionalLabel1.setVisible(false);
        
        tagTypeContentTextField = new JTextField();
        tagTypeContentTextField.setColumns(10);
        
        tagValueContentTextField = new JTextField();
        tagValueContentTextField.setColumns(10);
        
        optionalTextField1 = new JTextField();
        optionalTextField1.addKeyListener(new KeyListener() {
        	public void keyPressed(KeyEvent keyEvent) {
        		
        	}

        	public void keyReleased(KeyEvent keyEvent) {
        		optionalTextField1ActionPerformed(keyEvent);
        	}

        	public void keyTyped(KeyEvent keyEvent) {
        		
        	}

        });
        optionalTextField1.setColumns(10);
        optionalTextField1.setVisible(false);

        optionalTextField2 = new JTextField();
        optionalTextField2.addKeyListener(new KeyListener() {
        	public void keyPressed(KeyEvent keyEvent) {
        		
        	}

        	public void keyReleased(KeyEvent keyEvent) {
        		optionalTextField12ActionPerformed(keyEvent);
        	}

        	public void keyTyped(KeyEvent keyEvent) {
        		
        	}

        });

        optionalTextField2.setColumns(10);
        optionalTextField2.setVisible(false);

        optionalLabel2 = new JLabel();
        optionalLabel2.setText("Output Step #");
        optionalLabel2.setName("outputStepLabel");
        optionalLabel2.setVisible(false);
        
        outputStepNumLabel = new JLabel();
        outputStepNumLabel.setText("Output Step #");
        outputStepNumLabel.setName("jLabel1");
        
        outputStepNumTextField = new JTextField();
        outputStepNumTextField.setText("stepNumTextField");
        outputStepNumTextField.setName("stepNumTextField");
        outputStepNumTextField.setEditable(false);
        
        GroupLayout layout = new GroupLayout(this);
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(tagTypeContentLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(tagTypeLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(outputStepNumLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(inputStepNumLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addGap(54)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(tagTypeComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addGroup(layout.createSequentialGroup()
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addComponent(tagTypeContentTextField, GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)))
        							.addGap(81))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(addButton)
        							.addGap(74)
        							.addComponent(clearButton)
        							.addGap(11)))
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        						.addComponent(tagValueLabel, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(optionalLabel1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(tagValueContentLabel, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        						.addComponent(optionalLabel2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(cancelButton))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(tagValueComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(optionalTextField2, GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
        						.addComponent(optionalTextField1)
        						.addComponent(tagValueContentTextField)))
        				.addComponent(outputStepNumTextField, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
        				.addComponent(inputStepNumTextField, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE))
        			.addGap(228))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(24)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(inputStepNumLabel)
        				.addComponent(inputStepNumTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(outputStepNumLabel)
        				.addComponent(outputStepNumTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(tagTypeLabel)
        				.addComponent(tagValueLabel)
        				.addComponent(tagTypeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(tagValueComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(tagTypeContentLabel)
        				.addComponent(tagTypeContentTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(tagValueContentTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(tagValueContentLabel))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(optionalLabel1)
        				.addComponent(optionalTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(optionalLabel2)
        				.addComponent(optionalTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(75)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(cancelButton)
        				.addComponent(clearButton)
        				.addComponent(addButton))
        			.addContainerGap(270, Short.MAX_VALUE))
        );
        this.setLayout(layout);
    }// </editor-fold>//GEN-END:initComponents



	
	private void optionalTextField12ActionPerformed(KeyEvent evt) {
		
		String tagType = (String)tagTypeComboBox.getSelectedItem();
			
		if(tagType.equals("Reference To Output Step")){
			
			String outputStep = optionalTextField2.getText();
			String tagContent = tagValueContentTextField.getText();
			int i1 = tagContent.lastIndexOf("[");
			int i2 = tagContent.lastIndexOf("]");
			String tagContent1 = tagContent.substring(0, i1+1);
			String tagContent2 = tagContent.substring(i2, tagContent.length());
			this.tagValueContentTextField.setText(tagContent1 + outputStep + tagContent2);	
			
		}else{
			
			String refPlaceHolder = optionalTextField2.getText();
			String tagContent = tagValueContentTextField.getText();
			int i1 = tagContent.indexOf(".");
			System.out.println(i1);
			String tagContent1 = tagContent.substring(i1, tagContent.length());
			System.out.println(tagContent1);
			this.tagValueContentTextField.setText(refPlaceHolder + tagContent1);

		}
		
	}

	private void optionalTextField1ActionPerformed(KeyEvent evt) {
		
		String tagValue = (String) tagValueComboBox.getSelectedItem();
		
		if(tagValue.equals("Future Time")){
		
			String extraTime = optionalTextField1.getText();
			this.tagValueContentTextField.setText("@TIMEPLUS+" + extraTime);

		}else if(tagValue.equals("Get Tag Value From Referenced Step")){
			
			String theOtherTag = optionalTextField1.getText();
			String tagContent = tagValueContentTextField.getText();
			int i1 = tagContent.indexOf("(");
			int i2 = tagContent.indexOf(")");
			String tagContent1 = tagContent.substring(0, i1+1);
			String tagContent2 = tagContent.substring(i2, tagContent.length());
			this.tagValueContentTextField.setText(tagContent1 + theOtherTag + tagContent2);
		
		}else{

			String inputStep = optionalTextField1.getText();
			String tagContent = tagValueContentTextField.getText();
			int i1 = tagContent.indexOf("[");
			int i2 = tagContent.indexOf("]");
			String tagContent1 = tagContent.substring(0, i1+1);
			String tagContent2 = tagContent.substring(i2, tagContent.length());
			this.tagValueContentTextField.setText(tagContent1 + inputStep + tagContent2);
		}
	}

	private void tagValueComboBoxActionPerformed(ActionEvent evt) {
		
		//tagValueOptions = { "Other", "Remove Tag from Msg"};
        String tagValue = (String) tagValueComboBox.getSelectedItem();

		if(tagValue.equals("Other")){
			
			resetTagValueFields();
			
		}else if(tagValue.equals("Remove Tag from Msg")){
			
			resetTagValueFields();
			tagValueContentTextField.setText("@REMOVE");
			
		}else if(tagValue.equals("Buy")){
			
			tagValueContentTextField.setText("1");
			
		}else if(tagValue.equals("Sell")){
			
			tagValueContentTextField.setText("2");
			
		}else if(tagValue.equals("Sell short")){
			
			tagValueContentTextField.setText("5");
			
		}else if(tagValue.equals("Sell short exempt")){
			
			tagValueContentTextField.setText("6");
			
		}else if(tagValue.equals("Current Time")){
			
			tagValueContentTextField.setText("@TIMEPLUS");
			optionalTextField1.setText("");
			optionalLabel1.setVisible(false);
			optionalTextField1.setVisible(false);
			tagValueContentTextField.setEditable(false);
			
		}else if(tagValue.equals("Future Time")){
			
			tagValueContentTextField.setText("@TIMEPLUS+");
			
			optionalLabel1.setText("Time (ms) from current time");
			optionalTextField1.setText("");
			optionalLabel1.setVisible(true);
			optionalTextField1.setVisible(true);
			tagValueContentTextField.setEditable(false);
			
		}else if(tagValue.equals("Get Tag Value From Referenced Step")){
			
			optionalLabel1.setText("Tag to get");
			optionalTextField1.setText(tagTypeContentTextField.getText());
			tagValueContentTextField.setText("@APVAR_REF.getTag(" + optionalTextField1.getText() + ")");
			
			optionalLabel2.setText("Reference Placeholder");
			optionalTextField2.setText("@APVAR_REF");
			
			optionalLabel1.setVisible(true);
			optionalTextField1.setVisible(true);
			optionalLabel2.setVisible(true);
			optionalTextField2.setVisible(true);
			tagValueContentTextField.setEditable(false);
		}
		
	}

	private void addTagButtonActionPerformed(java.awt.event.ActionEvent evt) {

		boolean valid = validateData();
		
		if(valid){
			
			if(isInputTag){
				LFTag tag = new LFTag(this.tagTypeContentTextField.getText(), this.tagValueContentTextField.getText());
				ApplicationContext.getTestcaseHelper().addInputStepTag(tag);
			}else{
				LFOutputTag tag = new LFOutputTag(this.tagTypeContentTextField.getText(), this.tagValueContentTextField.getText());
				
				ApplicationContext.getTestcaseHelper().addOutputStepTag(tag);
			}
						
			clearButtonActionPerformed(evt);

			((AutoPilotApplView)AutoPilotAppl.getApplication().getMainView()).showMainPanel();
		}else{
			msgLabel.setText("Required Fields are not Populated");
			AutoPilotAppl.getApplication().show(saveDialog);
		}

	}

	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
		
		tagTypeComboBox.setSelectedIndex(0);
		tagTypeContentTextField.setText("");
		
		resetTagValueFields();
		
	}//GEN-LAST:event_clearButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		clearButtonActionPerformed(evt);
		
		((AutoPilotApplView)AutoPilotAppl.getApplication().getMainView()).showMainPanel();
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void tagTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
		
		//tagTypeOptions  = { "Other", "ClientID", "Side", "OrderPrice", "OrderQuanity", "FarPrice", "NearPrice", "Reference To Input Step", "Reference To Output Step", "ExpireTime", "OrderID", "Price Of This(Last) Fill", "Qty On This(Last) Fill"  };
        
		String tagType = (String)tagTypeComboBox.getSelectedItem();
		
		resetTagValueFields();
		
//		String[] tagValueOptions = new String[] { "Other", "Get Tag Value From Referenced Step", "Remove Tag from Msg"};
//		tagValueComboBox.setModel(new javax.swing.DefaultComboBoxModel(tagValueOptions));
//		tagValueComboBox.setSelectedIndex(0);
		
		updateTagValueOptions(new String[] { "Other", "Get Tag Value From Referenced Step", "Remove Tag from Msg"});
		
		if(tagType.equals("Other")){
			
			tagTypeContentTextField.setText("");
			
		}else if(tagType.equals("ClientID")){
			
			tagTypeContentTextField.setText("10270");
			
		}else if(tagType.equals("Side")){
			
			this.tagTypeContentTextField.setText("54");
			
//			tagValueOptions = new String[] { "Buy", "Sell", "Sell short", "Sell short exempt"};
//			tagValueComboBox.setModel(new javax.swing.DefaultComboBoxModel(tagValueOptions));
//			tagValueComboBox.setSelectedIndex(0);
			
			updateTagValueOptions(new String[] { "Buy", "Sell", "Sell short", "Sell short exempt"});
	        
	        tagValueContentTextField.setText("1");
			
		}else if(tagType.equals("OrderPrice")){
			
			tagTypeContentTextField.setText("44");
			
		}else if(tagType.equals("OrderQuanity")){
			
			tagTypeContentTextField.setText("38");
			
		}else if(tagType.equals("FarPrice")){
			
			tagTypeContentTextField.setText("10626");
			
		}else if(tagType.equals("NearPrice")){
			
			tagTypeContentTextField.setText("10625");
			
		}else if(tagType.equals("NearPrice")){
			
			tagTypeContentTextField.setText("10625");
			
		}else if(tagType.equals("Reference To Input Step") ){
			
			tagTypeContentTextField.setText("@APVAR_REF");
			
			tagValueContentTextField.setText("@IP[]");
			
			optionalLabel1.setText("Input Step #");
			optionalTextField1.setText("");
			optionalLabel1.setVisible(true);
			optionalTextField1.setVisible(true);
			tagValueContentTextField.setEditable(false);
			tagValueComboBox.setEnabled(false);
		
		}else if(tagType.equals("Reference To Output Step")){
			
			tagTypeContentTextField.setText("@APVAR_REF");
			tagValueContentTextField.setText("@OP[][]");
			
			optionalLabel1.setText("Input Step #");
			optionalLabel2.setText("Output Step #");
			optionalTextField1.setText("");
			optionalTextField2.setText("");
			optionalLabel1.setVisible(true);
			optionalTextField1.setVisible(true);
			optionalLabel2.setVisible(true);
			optionalTextField2.setVisible(true);
			tagValueContentTextField.setEditable(false);
			tagValueComboBox.setEnabled(false);
			
		}else if(tagType.equals("ExpireTime")){
			
			tagTypeContentTextField.setText("126");			
			
//			tagValueOptions = new String[] { "Current Time", "Future Time"};
//			tagValueComboBox.setModel(new javax.swing.DefaultComboBoxModel(tagValueOptions));
//			tagValueComboBox.setSelectedIndex(0);
			
			updateTagValueOptions(new String[] { "Current Time", "Future Time"});
			
	        tagValueContentTextField.setText("@TIMEPLUS");
			
		}else if(tagType.equals("OrderID")){
			
			tagTypeContentTextField.setText("37");
			
		}else if(tagType.equals("Price Of This(Last) Fill")){
			
			tagTypeContentTextField.setText("31");
			
		}else if(tagType.equals("Qty On This(Last) Fill")){
			
			tagTypeContentTextField.setText("32");
			
		}
        //tagValueComboBox.setSelectedIndex(0);
	}
	
	private void updateTagValueOptions(String[] optionsList){
		
		updateTagValueOptions(optionsList, true);
	}
	
	private void updateTagValueOptions(String[] optionsList, boolean toResetChoice){
		
        tagValueComboBox.setModel(new javax.swing.DefaultComboBoxModel(optionsList));
        
        if(toResetChoice){
        	tagValueComboBox.setSelectedIndex(0);
        }
		
	}
	
	private void resetTagValueFields(){
		
		tagValueComboBox.setSelectedIndex(0);
		
		optionalLabel1.setVisible(false);
		optionalTextField1.setVisible(false);
		optionalLabel2.setVisible(false);
		optionalTextField2.setVisible(false);
		
		tagValueContentTextField.setEditable(true);
		tagValueComboBox.setEnabled(true);
		
		tagValueContentTextField.setText("");
		optionalTextField1.setText("");
		optionalTextField2.setText("");
		
	}
	
	public void populateForm(Step inputStep, boolean isInputStep){		

		this.inputStep= inputStep;
		this.isInputTag = isInputStep;
		inputStepNumTextField.setText(String.valueOf(inputStep.getActionSequence()));	
		this.outputStepNumLabel.setVisible(false);
		this.outputStepNumTextField.setVisible(false);

	}

	public void populateForm(LFOutputMsg outputStep, boolean isInputStep){		

		this.isInputTag = isInputStep;
		inputStepNumTextField.setText(String.valueOf(outputStep.getActionSequence()));	

		this.outputStepNumLabel.setVisible(true);
		this.outputStepNumTextField.setVisible(true);
		outputStepNumTextField.setText(String.valueOf(outputStep.getOutputMsgID()));

	}

	public void tableChanged(TableModelEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	private boolean validateData(){
		
		boolean valid = true;
		
		if(tagTypeContentTextField.getText().length() == 0 || tagValueContentTextField.getText().length() == 0){
			valid = false;
		}else{
			
			String tagType = (String)tagTypeComboBox.getSelectedItem();
			
			if(tagType.equals(tagType.equals("Reference To Input Step"))){
				
				if(optionalTextField1.getText().length() == 0){
					valid = false;
				}
				
			}else if(tagType.equals(tagType.equals("Reference To Output Step"))){
				
				if(optionalTextField1.getText().length() == 0 || optionalTextField1.getText().length() == 0){
					valid = false;
				}
			}else if(tagType.equals(tagType.equals("Future Time"))){

				if(optionalTextField1.getText().length() == 0){
					valid = false;
				}
			}else if(tagType.equals(tagType.equals("Get Tag Value From Referenced Step"))){
				
				if(optionalTextField1.getText().length() == 0){
					valid = false;
				}
			}
		}
		
		return valid;
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel inputStepNumLabel;
    private javax.swing.JLabel tagTypeLabel;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JDialog saveDialog;
    private javax.swing.JTextField inputStepNumTextField;
    private javax.swing.JComboBox tagTypeComboBox;
    private javax.swing.JComboBox tagValueComboBox;
    // End of variables declaration//GEN-END:variables

	private Step inputStep = new LFTestInputSteps();

	private Map <String, List<LFCommonOverwriteTag> > commonOverwriteTagMap = new TreeMap<String, List<LFCommonOverwriteTag>>();
	private JLabel tagValueContentLabel;
    private JLabel tagTypeContentLabel;
	private JLabel optionalLabel1;
	private JLabel optionalLabel2;
	private JLabel outputStepNumLabel;
	private JTextField tagTypeContentTextField;
	private JTextField tagValueContentTextField;
	private JTextField optionalTextField1;
	private JTextField optionalTextField2;
	private JLabel tagValueLabel;
	
	private boolean isInputTag;
	private JTextField outputStepNumTextField;
}
