package com.citigroup.liquifi.autopilot.gui;

import java.awt.Color;
import java.awt.Rectangle;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.swing.DefaultCellEditor;
import javax.swing.DropMode;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.TransferHandler;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

import com.citigroup.liquifi.AutoPilotAppl;
import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.controller.TestCaseController;
import com.citigroup.liquifi.autopilot.controller.ValidationObject;
import com.citigroup.liquifi.autopilot.gui.dndTree.TestCaseTreeNode;
import com.citigroup.liquifi.autopilot.gui.model.InputStepTableModel;
import com.citigroup.liquifi.autopilot.gui.model.OutputStepTableModel;
import com.citigroup.liquifi.autopilot.helper.TestCaseHelper;
import com.citigroup.liquifi.autopilot.util.PlaceHolders;
import com.citigroup.liquifi.entities.LFLabel;
import com.citigroup.liquifi.entities.LFOutputMsg;
import com.citigroup.liquifi.entities.LFOutputTag;
import com.citigroup.liquifi.entities.LFTag;
import com.citigroup.liquifi.entities.LFTemplate;
import com.citigroup.liquifi.entities.LFTestCase;
import com.citigroup.liquifi.entities.LFTestInputSteps;
import com.citigroup.liquifi.util.DBUtil;
import com.citigroup.liquifi.util.Util;

import javax.swing.JButton;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.JLabel;

import java.awt.Font;

public class InputTestCasePanel extends javax.swing.JPanel implements TableModelListener {
	private static final long serialVersionUID = 1L;

	public InputTestCasePanel() {
		testcaseHelper = ApplicationContext.getTestcaseHelper();
		//appNameList = DBUtil.getInstance().getTcm().getAppName();
		appNameList = new ArrayList<String>();
		String strApplication = System.getProperty("application");
		if (strApplication.equalsIgnoreCase("AEE")) {
			System.setProperty("application","LIQUIFI");
		}
		appNameList.add(System.getProperty("application"));
		
		
		categoryList = DBUtil.getInstance().getTcm().getCategory();

		initComponents();
		initColumnWidth();
		
		addStylesToDocument(jTextPane1.getStyledDocument());
		addStylesToDocument(jTextPane2.getStyledDocument());
		
		 if(ApplicationContext.getConfig().getHighlightedTags() != null) {
			 hightLightTextField.setText(ApplicationContext.getConfig().getHighlightedTags());
			 hightLightTextField1.setText(ApplicationContext.getConfig().getHighlightedTags());
		 }
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputTablePopupMenu = new javax.swing.JPopupMenu();
        inputTablePopupMenu.addPopupMenuListener(new PopupMenuListener() {

        	public void popupMenuCanceled(PopupMenuEvent e) {
            }

            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
            }

            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
            	JTable table = inputStepTable;
            	if(!inputClick) {
            		table = outputStepTable;
            	}
            	int selectedRow = table.rowAtPoint(table.getMousePosition());
            	ListSelectionModel model = table.getSelectionModel();
            	model.setSelectionInterval(selectedRow, selectedRow);
            }
          });
        editMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        insertMenuItem = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        popupScrollPane = new javax.swing.JScrollPane();
        popupTextArea = new javax.swing.JTextArea();
        testCaseRunStatusTextBox = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        outputStepTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTagTable = new javax.swing.JTable();
        addRowButton = new javax.swing.JButton();
        deleteRowButton = new javax.swing.JButton();
        addRowButton3 = new javax.swing.JButton();
        deleteRowButton3 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        hightLightTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputStepTable = new javax.swing.JTable(){
        	 //Implement table cell tool tips.
            public String getToolTipText(MouseEvent e) {
                
            	String tip = null;
            	if(toShowCommentToolTip){
            		java.awt.Point p = e.getPoint();
            		int rowIndex = rowAtPoint(p);
            		TableModel model = getModel();
            		String actionSequence = model.getValueAt(rowIndex,0).toString();
            		//                String template = model.getValueAt(rowIndex,1).toString();
            		//                String messageType = model.getValueAt(rowIndex,2).toString();
            		//                String topicID = model.getValueAt(rowIndex,3).toString();
            		//                String message = model.getValueAt(rowIndex,4).toString();
            		//                
            		//                tip = "actionSequence:" + actionSequence + " " + 
            		//                		"template:" + template + " " + 
            		//                		"message:" + message + " " + 
            		//                		"messageType:" + messageType + " " + 
            		//                		"topicID:" + topicID + " ";
            		tip = (String) model.getValueAt(rowIndex, 4);
            		if(tip == null || tip.length() == 0){
            			tip = "<No comments>";
            		}
            		
            		tip = "Step " + actionSequence + ": " + tip;
            	}
                return tip;
            }
        };

        
        addRowButton2 = new javax.swing.JButton();
        deleteRowButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        inputTagTable = new javax.swing.JTable();
        addRowButton1 = new javax.swing.JButton();
        deleteRowButton1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        hightLightTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        testCaseStartButton = new javax.swing.JToggleButton();
        testCaseNextButton = new javax.swing.JButton();
        testCaseSymbolTextBox = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        appNameComboBox = new javax.swing.JComboBox();
        appNameComboBox.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		appNameComboBoxActionPerformed();
        	}
        });
        jLabel2 = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox();
        categoryComboBox.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		categoryComboBoxActionPerformed();
        	}
        });
        jLabel3 = new javax.swing.JLabel();
        testIDTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        regionComboBox = new javax.swing.JComboBox();
        regionComboBox.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		regionComboBoxActionPerformed();
        	}
        });
        testcaseNameLabel = new javax.swing.JLabel();
        testcaseNameTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        releaseNumTextField = new javax.swing.JTextField();
        releaseNumTextField.addKeyListener(new KeyListener() {
        	public void keyPressed(KeyEvent keyEvent) {
        		
        	}
        	
        	public void keyReleased(KeyEvent keyEvent) {
        		releaseNumTextFieldKeyReleased();
        	}
        	
        	public void keyTyped(KeyEvent keyEvent) {
        		
        	}
        	
        });
        jLabel9 = new javax.swing.JLabel();
        yesRadioButton = new javax.swing.JRadioButton();
        yesRadioButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		yesRadioButtonActionPerformed();
        	}
        });
        noRadioButton = new javax.swing.JRadioButton();
        noRadioButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		noRadioButtonActionPerformed();
        	}
        });
        jLabel10 = new javax.swing.JLabel();
        securityClassComboBox = new javax.swing.JComboBox();
        securityClassComboBox.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		securityClassComboBoxActionPerformed();
        	}
        });
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();

        inputTablePopupMenu.setName("inputTablePopupMenu"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.citigroup.liquifi.AutoPilotAppl.class).getContext().getResourceMap(InputTestCasePanel.class);
        editMenuItem.setText(resourceMap.getString("editMenuItem.text")); // NOI18N
        editMenuItem.setToolTipText(resourceMap.getString("editMenuItem.toolTipText")); // NOI18N
        editMenuItem.setName("editMenuItem"); // NOI18N
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	editStepInTestCase();
            }
        });
        inputTablePopupMenu.add(editMenuItem);

        copyMenuItem.setText(resourceMap.getString("copyMenuItem.text")); // NOI18N
        copyMenuItem.setToolTipText(resourceMap.getString("copyMenuItem.toolTipText")); // NOI18N
        copyMenuItem.setName("copyMenuItem"); // NOI18N
        copyMenuItem.setEnabled(false);
        inputTablePopupMenu.add(copyMenuItem);

        pasteMenuItem.setText(resourceMap.getString("pasteMenuItem.text")); // NOI18N
        pasteMenuItem.setToolTipText(resourceMap.getString("pasteMenuItem.toolTipText")); // NOI18N
        pasteMenuItem.setName("pasteMenuItem"); // NOI18N
        pasteMenuItem.setEnabled(false);
        inputTablePopupMenu.add(pasteMenuItem);

        cutMenuItem.setText(resourceMap.getString("cutMenuItem.text")); // NOI18N
        cutMenuItem.setToolTipText(resourceMap.getString("cutMenuItem.toolTipText")); // NOI18N
        cutMenuItem.setName("cutMenuItem"); // NOI18N
        cutMenuItem.setEnabled(false);
        inputTablePopupMenu.add(cutMenuItem);

        deleteMenuItem.setText(resourceMap.getString("deleteMenuItem.text")); // NOI18N
        deleteMenuItem.setToolTipText(resourceMap.getString("deleteMenuItem.toolTipText")); // NOI18N
        deleteMenuItem.setName("deleteMenuItem"); // NOI18N
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStepMenuItem(evt);
            }
        });
        inputTablePopupMenu.add(deleteMenuItem);

        insertMenuItem.setText(resourceMap.getString("insertMenuItem.text")); // NOI18N
        insertMenuItem.setName("insertMenuItem"); // NOI18N
        insertMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertStepMenuItem(evt);
            }
        });
        inputTablePopupMenu.add(insertMenuItem);

        popupScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        popupScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        popupScrollPane.setName("popupScrollPane"); // NOI18N

        popupTextArea.setColumns(20);
        popupTextArea.setRows(5);
        popupTextArea.setText(resourceMap.getString("popupTextArea.text")); // NOI18N
        popupTextArea.setWrapStyleWord(true);
        popupTextArea.setName("popupTextArea"); // NOI18N
        popupScrollPane.setViewportView(popupTextArea);

        setName("Form"); // NOI18N

        testCaseRunStatusTextBox.setText(resourceMap.getString("testCaseRunStatus.text")); // NOI18N
        testCaseRunStatusTextBox.setToolTipText(resourceMap.getString("testCaseRunStatus.toolTipText")); // NOI18N
        testCaseRunStatusTextBox.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("testCaseRunStatus.border.title"))); // NOI18N
        testCaseRunStatusTextBox.setDisabledTextColor(resourceMap.getColor("testCaseRunStatus.disabledTextColor")); // NOI18N
        testCaseRunStatusTextBox.setEnabled(false);
        testCaseRunStatusTextBox.setMaximumSize(new java.awt.Dimension(390, 50));
        testCaseRunStatusTextBox.setMinimumSize(new java.awt.Dimension(390, 50));
        testCaseRunStatusTextBox.setName("testCaseRunStatus"); // NOI18N
        testCaseRunStatusTextBox.setPreferredSize(new java.awt.Dimension(390, 50));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setMaximumSize(new java.awt.Dimension(100000, 2000));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(1220, 400));

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        outputStepTable.setModel(testcaseHelper.getOutputStepModel());
        outputStepTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        outputStepTable.setMaximumSize(new java.awt.Dimension(1000000, 1000000));
        outputStepTable.setMinimumSize(new java.awt.Dimension(500, 400));
        outputStepTable.setName("outPutStepTable"); // NOI18N
        outputStepTable.setDragEnabled(true);
        outputStepTable.setDropMode(DropMode.INSERT);
        outputStepTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        outputStepTable.getColumnModel().getColumn(0).setMaxWidth(60);
        DefaultTableCellRenderer stepCR = new DefaultTableCellRenderer();
        stepCR.setHorizontalAlignment(SwingConstants.CENTER);
        outputStepTable.getColumnModel().getColumn(0).setCellRenderer(stepCR);
        
        outputStepTable.addMouseListener(new java.awt.event.MouseAdapter() {
        	public void mousePressed(java.awt.event.MouseEvent evt) {
        		// if cells are being edited, then freeze the results whilst the user clicks elsewhere
        		if(inputTagTable.getCellEditor() != null) {
        			inputTagTable.getCellEditor().stopCellEditing();
        		}
        		if(outputTagTable.getCellEditor() != null) {
        			outputTagTable.getCellEditor().stopCellEditing();
        		}
        	}
        	
            public void mouseReleased(java.awt.event.MouseEvent evt) {
            	inputClick = false;
                outPutStepTableMouseReleased(evt);
            }
            
            public void mouseClicked(MouseEvent e) {
            	inputClick = false;
        		if(e.getClickCount() == 2) {
        			editStepInTestCase();
        		}
        	}
        });
        outputStepTable.setTransferHandler(new TransferHandler() {
			private static final long serialVersionUID = 1L;

			public boolean canImport(TransferSupport support) {
             	if (!support.isDataFlavorSupported(DataFlavor.stringFlavor)) {
             		return false;
            	}

            	return true;
            }
            public int getSourceActions(JComponent c) {
                return TransferHandler.COPY_OR_MOVE;
            }

            public boolean importData(TransferHandler.TransferSupport support) {
            	if (!canImport(support)) {
            		return false;
            	}
            	
            	String sourceRow;
            	try {
            		sourceRow = (String) support.getTransferable().getTransferData(DataFlavor.stringFlavor);
            	} catch (UnsupportedFlavorException e) {
            		return false;
            	} catch (IOException e) {
            		return false;
              	}
            	
            	populateTempRefStepMap(false); //save child step ref for every parent
            	if(support.isDrop()) {
	            	JTable.DropLocation dl = (JTable.DropLocation) support.getDropLocation();
	
	            	int targetRow = dl.getRow();
	
	              	Rectangle rect = outputStepTable.getCellRect(targetRow, 0, false);
	            	if (rect != null) {
	            		outputStepTable.scrollRectToVisible(rect);
	              	}
	              	OutputStepTableModel tableModel = testcaseHelper.getOutputStepModel();
	              	LFOutputMsg source = (LFOutputMsg)tableModel.getRow(Integer.parseInt(sourceRow));
	              
	              	if(Integer.parseInt(sourceRow) > targetRow) {
	            		tableModel.addRow(targetRow, source);	//add
	            		tableModel.removeRow(Integer.parseInt(sourceRow) + 1);
	            		cleanUp(tableModel.getOutputList().get(targetRow), targetRow);
	              	} else {
	            		tableModel.addRow(targetRow+1, source);	//insert
	            		tableModel.removeRow(Integer.parseInt(sourceRow));
					}
            	} else { //paste action
            		int targetRow = outputStepTable.getSelectedRow();
            		OutputStepTableModel tableModel = testcaseHelper.getOutputStepModel();            		
	            	LFOutputMsg source = (LFOutputMsg)tableModel.getRow(Integer.parseInt(sourceRow));
	            	
            		if (targetRow >= 0) {
            			tableModel.addRow(targetRow + 1, source.clone());
            		}
            		else { //assume end of list
            			tableModel.addRow(tableModel.getRowCount(), source.clone());
            		}
            		
            	}
            	updateChildStepReference(false);
            	ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
        		
            	return true;
            }
            
			private void cleanUp(LFOutputMsg target, int targetRow) {
				target.setOutputMsgID(targetRow + 1);
				for(LFOutputTag outputOverrideTag: target.getOutputTagList()) {
					outputOverrideTag.setOutputMsgID(targetRow + 1);
				}
			}
            
            protected Transferable createTransferable(JComponent c) {
                JTable table = (JTable)c;
                int[] values = table.getSelectedRows();
        
                StringBuffer buff = new StringBuffer();

                for (int i = 0; i < values.length; i++) {
                    Object val = values[i];
                    buff.append(val == null ? "" : val.toString());
                    if (i != values.length - 1) {
                        buff.append("\n");
                    }
                }
                return new StringSelection(buff.toString());

            }

          });
        jScrollPane4.setViewportView(outputStepTable);
        outputStepTable.getSelectionModel().addListSelectionListener(new RowListener(outputStepTable));

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        outputTagTable.setModel(testcaseHelper.getOutputTagModel());
        outputTagTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        outputTagTable.setComponentPopupMenu(inputTablePopupMenu);
        outputTagTable.setMaximumSize(new java.awt.Dimension(10, 0));
        outputTagTable.setName("outputTagTable"); // NOI18N
        outputTagTable.getModel().addTableModelListener(this);
        TableRowSorter<TableModel> sorter3 = new TableRowSorter<TableModel> (outputTagTable.getModel());
        outputTagTable.setRowSorter(sorter3);
        jScrollPane2.setViewportView(outputTagTable);
        outputTagTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("outputTagTable.columnModel.title0")); // NOI18N
        outputTagTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("outputTagTable.columnModel.title1")); // NOI18N
        outputTagTable.setRowSelectionAllowed(true);
        outputTagTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
       
        
        addRowButton.setIcon(resourceMap.getIcon("addRowButton.icon")); // NOI18N
        addRowButton.setText(resourceMap.getString("addRowButton.text")); // NOI18N
        addRowButton.setName("addRowButton"); // NOI18N
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOutputStepTag(evt);
            }
        });

        deleteRowButton.setIcon(resourceMap.getIcon("deleteRowButton.icon")); // NOI18N
        deleteRowButton.setText(resourceMap.getString("deleteRowButton.text")); // NOI18N
        deleteRowButton.setName("deleteRowButton"); // NOI18N
        deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOutputStepTag(evt);
            }
        });

        addRowButton3.setIcon(resourceMap.getIcon("addRowButton3.icon")); // NOI18N
        addRowButton3.setName("addRowButton3"); // NOI18N
        addRowButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOutputStep(evt);
            }
        });

        deleteRowButton3.setIcon(resourceMap.getIcon("deleteRowButton3.icon")); // NOI18N
        deleteRowButton3.setName("deleteRowButton3"); // NOI18N
        deleteRowButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOutputStep(evt);
            }
        });

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        jTextPane2.setEditable(false);
        jTextPane2.setName("jTextPane2"); // NOI18N
        jScrollPane7.setViewportView(jTextPane2);

        hightLightTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        hightLightTextField.setName("hightLightTextField"); // NOI18N
        hightLightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hightLightTextField1KeyReleased(evt);
            }
        });
        
        JButton outputStepSmartTagButton = new JButton("");
        outputStepSmartTagButton.setToolTipText("SmartTag (Output Step) ");
        outputStepSmartTagButton.setIcon(new ImageIcon(InputTestCasePanel.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/tag.png")));
        outputStepSmartTagButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		addOutputStepSmartTag(evt);
        	}
        });
        
        stepLinkButton = new JButton("");
        stepLinkButton.setToolTipText("StepLink: Create a strong parent/child link between selected output step and any other step(s)");
        stepLinkButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		stepLinkButtonActionPerformed(evt);
        	}
        });
        stepLinkButton.setIcon(new ImageIcon(InputTestCasePanel.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/insert_link2.png")));
        stepLinkButton.setSelectedIcon(new ImageIcon(InputTestCasePanel.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/insert_link.png")));

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addComponent(addRowButton3, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(deleteRowButton3, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
        				.addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addComponent(addRowButton, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(deleteRowButton, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(outputStepSmartTagButton)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(stepLinkButton, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE))
        				.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 204, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(hightLightTextField)
        				.addComponent(jScrollPane7, GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(addRowButton3, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
        				.addComponent(deleteRowButton3, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addComponent(addRowButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
        				.addComponent(deleteRowButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addComponent(hightLightTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(stepLinkButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addComponent(outputStepSmartTagButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane7, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
        				.addComponent(jScrollPane2, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
        				.addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
        );
        jPanel2.setLayout(jPanel2Layout);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setMaximumSize(new java.awt.Dimension(100000, 2000));
        jPanel3.setMinimumSize(new java.awt.Dimension(1220, 300));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(1220, 400));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        inputStepTable.setModel(testcaseHelper.getInputStepModel());
        inputStepTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        inputStepTable.setMaximumSize(new java.awt.Dimension(1000000, 1000000));
        inputStepTable.setMinimumSize(new java.awt.Dimension(500, 400));
        inputStepTable.setName("inputStepTable"); // NOI18N
        inputStepTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        inputStepTable.setDragEnabled(true);
        inputStepTable.setDropMode(DropMode.INSERT);
        inputStepTable.setTransferHandler(new TransferHandler() {
			private static final long serialVersionUID = 1L;

			public boolean canImport(TransferSupport support) {
				if (!support.isDataFlavorSupported(DataFlavor.stringFlavor)) {
					return false;
				}

				try {
					String sourceRow;
					sourceRow = (String) support.getTransferable().getTransferData(DataFlavor.stringFlavor);
					//System.out.println(sourceRow);
					if(sourceRow.startsWith("from_InputTestCasePanel")){
						String[] draggedLines = sourceRow.split("\n");
						if(draggedLines.length > 1){
							return false; // does not support multi-line dragged in InputTestCasePanel
						}

					}
				} catch (UnsupportedFlavorException e) {
					return false;
				} catch (IOException e) {
					return false;
				}

				//parse dragged lines


              return true;
            }
            public int getSourceActions(JComponent c) {
                return TransferHandler.COPY_OR_MOVE;
            }

            public boolean importData(TransferHandler.TransferSupport support) {
            	if (!canImport(support)) {
            		return false;
            	}

            	String sourceRow;
            	try {
            		sourceRow = (String) support.getTransferable().getTransferData(DataFlavor.stringFlavor);
            		//System.out.println(sourceRow);
            	} catch (UnsupportedFlavorException e) {
            		return false;
            	} catch (IOException e) {
            		return false;
            	}
            	//parse dragged lines
            	populateTempRefStepMap(true); //save child step ref for every parent
            	if(sourceRow.startsWith("from_InputTestCasePanel")){

            		sourceRow = sourceRow.replace("from_InputTestCasePanel", "");

            		if(support.isDrop()) {
            			JTable.DropLocation dl = (JTable.DropLocation) support.getDropLocation();

            			int targetRow = dl.getRow();

            			Rectangle rect = inputStepTable.getCellRect(targetRow, 0, false);
            			if (rect != null) {
            				inputStepTable.scrollRectToVisible(rect);
            			}
            			InputStepTableModel tableModel = testcaseHelper.getInputStepModel();

            			LFTestInputSteps source = (LFTestInputSteps)tableModel.getRow(Integer.parseInt(sourceRow));

            			if(Integer.parseInt(sourceRow) > targetRow) {
            				System.out.println("");
            				tableModel.addRow(targetRow, source);		//add
            				tableModel.removeRow(Integer.parseInt(sourceRow) + 1);
            				cleanUp(tableModel.getData().get(targetRow), targetRow);
            			} else {
            				tableModel.addRow(targetRow+1, source);	//insert
            				tableModel.removeRow(Integer.parseInt(sourceRow));
            			}
            		} else {//paste action
            			System.out.println("paste action");
            			int targetRow = inputStepTable.getSelectedRow();
            			InputStepTableModel tableModel = testcaseHelper.getInputStepModel();            		
            			LFTestInputSteps source = (LFTestInputSteps)tableModel.getRow(Integer.parseInt(sourceRow));

            			if (targetRow >= 0) {
            				tableModel.addRow(targetRow + 1, source.clone());
            			} else {//assume end of list
            				tableModel.addRow(tableModel.getRowCount(), source.clone());
            			}
            		}
            		
            		//updateChildStepReference(true);
            	}else if(sourceRow.startsWith("from_InputStepsClipboard")){
            		
            		//support multi-line dragging
            		String[] draggedLines = sourceRow.split("\n");

            		for(String srcLine : draggedLines){

            			JTable.DropLocation dl = (JTable.DropLocation) support.getDropLocation();
            			int targetRow = dl.getRow();
            			InputStepTableModel tableModel = testcaseHelper.getInputStepModel();

            			srcLine = srcLine.replace("from_InputStepsClipboard", "");
            			String[] tokens = srcLine.split("\\|");

            			if(tokens.length == 2){
            				String clipboardID = tokens[0];
            				String stepNum = tokens[1];
            				LFTestInputSteps stepToCopy = clipboardsMap.get(clipboardID).getInputStepsTableModel().getData().get(Integer.parseInt(stepNum));
            				if (targetRow >= 0) {
            					tableModel.addRow(targetRow, stepToCopy.clone(ApplicationContext.getTestcaseHelper().getTestcase().getTestID()));
            				} else {//assume end of list
            					tableModel.addRow(tableModel.getRowCount(), stepToCopy.clone(ApplicationContext.getTestcaseHelper().getTestcase().getTestID()));
            				}
            			}
            		}
            	}
            	updateChildStepReference(true);
            	ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
            	return true;
            }
            
			private void cleanUp(LFTestInputSteps target, int targetRow) {
				for(LFTag inputOverrideTag: target.getInputTagsValueList()) {
					inputOverrideTag.setActionSequence(targetRow + 1);
				}
				for(LFOutputMsg outputMsg : target.getOutputStepList()) {
					outputMsg.setActionSequence(targetRow + 1);
					for(LFOutputTag outputOverrideTag: outputMsg.getOverrideTags()) {
						outputOverrideTag.setActionSequence(targetRow + 1);
					}
				}
				target.setActionSequence(targetRow + 1);
			}
            
            protected Transferable createTransferable(JComponent c) {
                JTable table = (JTable)c;
                int[] values = table.getSelectedRows();
        
                StringBuffer buff = new StringBuffer();

//                for (int i = values.length-1; i >= 0; i--) {
                for (int i = 0; i < values.length; i++) {
                    Object val = values[i];
                    buff.append("from_InputTestCasePanel");
                    buff.append(val == null ? "" : val.toString());
                    if (i != values.length - 1) {
//                    if (i != 0) {
                        buff.append("\n");
                    }
                }
                return new StringSelection(buff.toString());

            }

          });

        inputStepTable.addMouseListener(new java.awt.event.MouseAdapter() {
        	public void mousePressed(java.awt.event.MouseEvent evt) {
        		// if cells are being edited, then freeze the results whilst the user clicks elsewhere
        		if(inputTagTable.getCellEditor() != null) {
        			inputTagTable.getCellEditor().stopCellEditing();
        		}
        		if(outputTagTable.getCellEditor() != null) {
        			outputTagTable.getCellEditor().stopCellEditing();
        		}
        	}
        	
            public void mouseReleased(java.awt.event.MouseEvent evt) {
            	inputClick = true;
                inputStepTableMouseReleased(evt);
            }
            public void mouseClicked(MouseEvent e) {
        		inputClick = true;
        		if(e.getClickCount() == 2) {
        			editStepInTestCase();
        		}
        		
        	}
        });
        jScrollPane1.setViewportView(inputStepTable);
        inputStepTable.getSelectionModel().addListSelectionListener(new RowListener(inputStepTable));
        inputStepTable.getColumnModel().getColumn(0).setMaxWidth(40); //step
        inputStepTable.getColumnModel().getColumn(1).setMaxWidth(200); //template
        inputStepTable.getColumnModel().getColumn(1).setMinWidth(180); //msg type
        inputStepTable.getColumnModel().getColumn(2).setMaxWidth(65); //msg type
        inputStepTable.getColumnModel().getColumn(3).setMaxWidth(200); //topic 
        inputStepTable.getColumnModel().getColumn(3).setMinWidth(140);
        inputStepTable.getColumnModel().getColumn(5).setMaxWidth(80); //message
        
        inputStepTable.getColumnModel().getColumn(0).setCellRenderer(stepCR);
        
        addRowButton2.setIcon(resourceMap.getIcon("addRowButton2.icon")); // NOI18N
        addRowButton2.setName("addRowButton2"); // NOI18N
        addRowButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInputStep(evt);
            }
        });

        deleteRowButton2.setIcon(resourceMap.getIcon("deleteRowButton2.icon")); // NOI18N
        deleteRowButton2.setName("deleteRowButton2"); // NOI18N
        deleteRowButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeInputStep(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        inputTagTable.setModel(testcaseHelper.getInputTagModel());
        inputTagTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        inputTagTable.setMaximumSize(new java.awt.Dimension(10, 0));
        inputTagTable.setName("inputTagTable"); // NOI18N
        //inputTagTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        inputTagTable.setRowSelectionAllowed(true);
        inputTagTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        inputTagTable.getModel().addTableModelListener(this);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel> (inputTagTable.getModel());
        inputTagTable.setRowSorter(sorter);
        jScrollPane3.setViewportView(inputTagTable);
        inputTagTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("inputTagTable.columnModel.title0")); // NOI18N
        inputTagTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("inputTagTable.columnModel.title1")); // NOI18N

        addRowButton1.setIcon(resourceMap.getIcon("addRowButton1.icon")); // NOI18N
        addRowButton1.setName("addRowButton1"); // NOI18N
        addRowButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInputStepTag(evt);
            }
        });

        deleteRowButton1.setIcon(resourceMap.getIcon("deleteRowButton1.icon")); // NOI18N
        deleteRowButton1.setName("deleteRowButton1"); // NOI18N
        deleteRowButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeInputStepTag(evt);
            }
        });

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        jTextPane1.setEditable(false);
        jTextPane1.setName("jTextPane1"); // NOI18N
        jScrollPane5.setViewportView(jTextPane1);

        hightLightTextField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        hightLightTextField1.setName("hightLightTextField1"); // NOI18N
        hightLightTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hightLightTextField1KeyReleased(evt);
            }
        });
        
        inputStepSmartTagButton = new JButton("");
        inputStepSmartTagButton.setToolTipText("SmartTag (Input Step)");
        inputStepSmartTagButton.setIcon(new ImageIcon(InputTestCasePanel.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/tag.png")));
        inputStepSmartTagButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		addInputStepSmartTag(evt);
        	}
        });

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3Layout.setHorizontalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE)
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addGap(2)
        					.addComponent(addRowButton2, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(deleteRowButton2, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addComponent(addRowButton1, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(deleteRowButton1, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        					.addGap(14)
        					.addComponent(inputStepSmartTagButton))
        				.addComponent(jScrollPane3, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 202, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(hightLightTextField1)
        				.addComponent(jScrollPane5, GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(addRowButton2, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
        				.addComponent(addRowButton1, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
        				.addComponent(deleteRowButton2, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addComponent(deleteRowButton1, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(hightLightTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(inputStepSmartTagButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane5, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
        				.addComponent(jScrollPane1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
        				.addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
        );
        jPanel3.setLayout(jPanel3Layout);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setMaximumSize(new java.awt.Dimension(390, 70));
        jPanel1.setMinimumSize(new java.awt.Dimension(390, 70));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(390, 70));

        testCaseStartButton.setIcon(resourceMap.getIcon("testCaseStartButton.icon")); // NOI18N
        testCaseStartButton.setText(resourceMap.getString("testCaseStartStopButton.text")); // NOI18N
        testCaseStartButton.setToolTipText(resourceMap.getString("testCaseStartStopButton.toolTipText")); // NOI18N
        testCaseStartButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        testCaseStartButton.setIconTextGap(0);
        testCaseStartButton.setMargin(new java.awt.Insets(2, 4, 2, 4));
        testCaseStartButton.setName("testCaseStartStopButton"); // NOI18N
        testCaseStartButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        testCaseStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTestcase(evt);
            }
        });

        testCaseNextButton.setIcon(resourceMap.getIcon("testCaseNextButton.icon")); // NOI18N
        testCaseNextButton.setText(resourceMap.getString("testCaseNextButton.text")); // NOI18N
        testCaseNextButton.setToolTipText(resourceMap.getString("testCaseNextButton.toolTipText")); // NOI18N
        testCaseNextButton.setEnabled(false);
        testCaseNextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        testCaseNextButton.setIconTextGap(0);
        testCaseNextButton.setMargin(new java.awt.Insets(2, 4, 2, 4));
        testCaseNextButton.setName("testCaseNextButton"); // NOI18N
        testCaseNextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        testCaseNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTestcaseStep(evt);
            }
        });

        testCaseSymbolTextBox.setText(resourceMap.getString("testCaseSymbolTextBox.text")); // NOI18N
        testCaseSymbolTextBox.setName("testCaseSymbolTextBox"); // NOI18N

        jLabel12.setBackground(resourceMap.getColor("jLabel12.background")); // NOI18N
        jLabel12.setFont(resourceMap.getFont("jLabel12.font")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(testCaseStartButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(testCaseNextButton)
                .add(29, 29, 29)
                .add(jLabel12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(testCaseSymbolTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(testCaseStartButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(testCaseNextButton))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(testCaseSymbolTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        testCaseNextButton.getAccessibleContext().setAccessibleDescription(resourceMap.getString("testCaseNextButton.AccessibleContext.accessibleDescription")); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel4.border.title"))); // NOI18N
        jPanel4.setMaximumSize(new java.awt.Dimension(820, 100));
        jPanel4.setMinimumSize(new java.awt.Dimension(820, 100));
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(820, 100));
        jPanel4.setRequestFocusEnabled(false);

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        appNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(appNameList.toArray(new String[appNameList.size()])));
        appNameComboBox.setName("appNameComboBox"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel(categoryList.toArray(new String[categoryList.size()])));
        categoryComboBox.setName("categoryComboBox"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        testIDTextField.setEditable(false);
        testIDTextField.setText(Util.getTestIDSequencer());
        testIDTextField.setName("testIDTextField"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        regionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "US", "EMEA", "HK", "JPN", "AUS", "MX", "GLOBAL" }));
        regionComboBox.setName("regionComboBox"); // NOI18N

        testcaseNameLabel.setFont(resourceMap.getFont("testcaseNameLabel.font")); // NOI18N
        testcaseNameLabel.setText(resourceMap.getString("testcaseNameLabel.text")); // NOI18N
        testcaseNameLabel.setName("testcaseNameLabel"); // NOI18N

        testcaseNameTextField.setText(resourceMap.getString("testcaseNameTextField.text")); // NOI18N
        testcaseNameTextField.setName("testcaseNameTextField"); // NOI18N
        testcaseNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                testcaseNameTextFieldKeyTyped(evt);
            }
            
            public void keyReleased(KeyEvent keyEvent) {
            	testcaseNameTextFieldKeyReleased();
        	}
        });

        jLabel8.setFont(resourceMap.getFont("jLabel8.font")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        releaseNumTextField.setText(resourceMap.getString("releaseNumTextField.text")); // NOI18N
        releaseNumTextField.setName("releaseNumTextField"); // NOI18N
        releaseNumTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                releaseNumTextFieldKeyTyped(evt);
            }
        });

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        buttonGroup1.add(yesRadioButton);
        yesRadioButton.setText(resourceMap.getString("yesRadioButton.text")); // NOI18N
        yesRadioButton.setName("yesRadioButton"); // NOI18N

        buttonGroup1.add(noRadioButton);
        noRadioButton.setSelected(true);
        noRadioButton.setText(resourceMap.getString("noRadioButton.text")); // NOI18N
        noRadioButton.setName("noRadioButton"); // NOI18N

        jLabel10.setFont(resourceMap.getFont("jLabel10.font")); // NOI18N
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        securityClassComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        securityClassComboBox.setName("securityClassComboBox"); // NOI18N
        securityClassComboBox.setSelectedItem(ApplicationContext.getConfig().getDefaultSecurityClass());
        securityClassComboBox.addItemListener(new ItemListener(){
        	 public void itemStateChanged(ItemEvent itemEvent) {
        		 securityClassStateChange(itemEvent);
        	 }
        });
        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(3);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionTextArea.setName("descriptionTextArea"); // NOI18N
        descriptionTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            
        	public void keyReleased(KeyEvent keyEvent) {
        		descriptionTextAreaKeyReleased();
			}
        	
        	public void keyTyped(java.awt.event.KeyEvent evt) {
                descriptionTextAreaKeyTyped(evt);
            }
        });
        
        
        jScrollPane6.setViewportView(descriptionTextArea);
        
        JButton btnAddLabel = new JButton("Add");
        btnAddLabel.setIcon(new ImageIcon(InputTestCasePanel.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/label.png")));
        btnAddLabel.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		addLabelButtonActionPerformed(evt);
        	}
        });
        
        JScrollPane scrollPane = new JScrollPane();
        
        btnRemoveLabel = new JButton("Remove");
        btnRemoveLabel.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		removeLabelButtonActionPerformed(evt);
        	}
        });
        
        jiraLabel = new JLabel();
        jiraLabel.setText("JIRA #");
        jiraLabel.setName("testcaseNameLabel");
        jiraLabel.setFont(new Font("Arial", Font.BOLD, 12));
        
        jiraTextField = new JTextField();
        jiraTextField.setName("releaseNumTextField");
        
        lblLastEditedBy = new JLabel();
        lblLastEditedBy.setText("Last Edited By ");
        lblLastEditedBy.setName("jLabel6");
        lblLastEditedBy.setFont(new Font("Dialog", Font.BOLD, 12));
        
        lastEditedUserTextField = new JTextField();
        lastEditedUserTextField.setName("testIDTextField");
        lastEditedUserTextField.setEditable(false);
        
        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4Layout.setHorizontalGroup(
        	jPanel4Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel4Layout.createSequentialGroup()
        			.addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel4Layout.createSequentialGroup()
        					.addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel4Layout.createSequentialGroup()
        							.addComponent(lblLastEditedBy, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(jLabel6))
        						.addComponent(lastEditedUserTextField, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(jScrollPane6, GroupLayout.PREFERRED_SIZE, 414, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
        					.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE))
        				.addGroup(jPanel4Layout.createSequentialGroup()
        					.addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel4)
        						.addComponent(jLabel2))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(jPanel4Layout.createParallelGroup(Alignment.TRAILING, false)
        						.addGroup(jPanel4Layout.createSequentialGroup()
        							.addComponent(appNameComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(jLabel3)
        							.addGap(5))
        						.addGroup(jPanel4Layout.createSequentialGroup()
        							.addComponent(categoryComboBox, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(jLabel7)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(regionComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel4Layout.createSequentialGroup()
        							.addComponent(testIDTextField, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(testcaseNameLabel)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(testcaseNameTextField, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(jiraLabel, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(jiraTextField, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE))
        						.addGroup(jPanel4Layout.createSequentialGroup()
        							.addComponent(jLabel8)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(releaseNumTextField, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(jLabel9)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(yesRadioButton)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(noRadioButton)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(jLabel10, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(securityClassComboBox, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
        							.addGap(18)
        							.addComponent(btnAddLabel)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(btnRemoveLabel, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)))
        					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        			.addGap(20))
        );
        jPanel4Layout.setVerticalGroup(
        	jPanel4Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel4Layout.createSequentialGroup()
        			.addGroup(jPanel4Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel4)
        				.addComponent(appNameComboBox, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
        				.addComponent(testcaseNameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(testcaseNameLabel)
        				.addComponent(testIDTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jiraLabel, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jiraTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel4Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(categoryComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel8)
        				.addComponent(releaseNumTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel9)
        				.addComponent(yesRadioButton)
        				.addComponent(noRadioButton)
        				.addComponent(jLabel10)
        				.addComponent(securityClassComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnAddLabel)
        				.addComponent(btnRemoveLabel, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
        				.addComponent(regionComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel7))
        			.addGap(8)
        			.addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel6)
        				.addGroup(jPanel4Layout.createParallelGroup(Alignment.TRAILING, false)
        					.addGroup(jPanel4Layout.createSequentialGroup()
        						.addComponent(lblLastEditedBy, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
        						.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(lastEditedUserTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addComponent(jScrollPane6, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap())
        );
        
        labelsTextPane = new JTextPane();
        labelsTextPane.setEditable(false);
        scrollPane.setViewportView(labelsTextPane);
        jPanel4.setLayout(jPanel4Layout);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(testCaseRunStatusTextBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)))
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1251, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1251, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(testCaseRunStatusTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4, 0, 126, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .add(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

	

    protected void removeLabelButtonActionPerformed(ActionEvent evt) {
    	
    	LFTestCase testcase = ApplicationContext.getTestcasePanel().getTestCase();
		ArrayList<String> optionArrayList = new ArrayList<String>();
		for(LFLabel lb : DBUtil.getInstance().getLbm().getLabelsForTestcase(testcase.getTestID())){
			optionArrayList.add(lb.getLabel());
		}
		Object[] possibilities = optionArrayList.toArray();
		String labelToRemove = (String)JOptionPane.showInputDialog(
				AutoPilotAppl.getApplication().getMainFrame(),
		                    "Please choose a label that you want to remove:",
		                    "Remove label from test case",
		                    JOptionPane.QUESTION_MESSAGE,
		                    null,
		                    possibilities,
		                    null);
		
		if(labelToRemove != null && labelToRemove.length() > 0){
			try {
				DBUtil.getInstance().getLbm().removeLabelFromTestcase(labelToRemove,testcase.getTestID());
				ApplicationContext.getTestRunPanel().decrementNodeCount(labelToRemove);
				setLabels();
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void updateChildStepReference(boolean parentIsInputStep) {
    	
    	if(parentIsInputStep){
    		for(LFTestInputSteps parentStep : testcaseHelper.getInputStepModel().getData()){
    			// update each reference child step
    			ArrayList<ChildStepEntry> childStepEntryList = tempStepRefMap.get(parentStep.getTempRefactorID());
    			if(childStepEntryList != null){
    				for(ChildStepEntry childStepEntry : childStepEntryList){ //update every child Step of the parent
    					String oldChildStepRef = childStepEntry.getOldChildStepRef();
    					LFOutputMsg childStep = childStepEntry.getChildStep();
    					String parentRefStep = childStep.getParentRefStep();
    					if(parentRefStep.split("\\]").length > 1){ //parent = output step
    						//find the parent(output step) and update its child reference
    						String outputPortionRef = parentRefStep.substring(parentRefStep.indexOf("]")+1);
    						int outputParentStepIdx = Integer.parseInt(outputPortionRef.replace("]", "").replace("[", ""))-1;
    						LFOutputMsg outputParentStep = parentStep.getOutputStepList().get(outputParentStepIdx);
    						String oldChildrenOutputSteps = outputParentStep.getChildrenOutputSteps();
        					String newChildStepRef = childStep.toString();
        					String newChildrenOutputSteps = oldChildrenOutputSteps.replace(oldChildStepRef, newChildStepRef);
        					outputParentStep.setChildrenOutputSteps(newChildrenOutputSteps);

    						childStep.setParentRefStep("[" + parentStep.getActionSequence() + "]" + outputPortionRef);
    						String refPlcHolder = childStep.getParentPlaceHolder();
    						for(LFOutputTag outputTag : childStep.getOverrideTags()){
    							if(outputTag.getTagID().equals(refPlcHolder)){
    								outputTag.setTagValue("@OP" + childStep.getParentRefStep()); //inputStep
    								ApplicationContext.getTestcaseHelper().getOutputTagModel().fireTableDataChanged();
    								break;
    							}
    						}
    					}else{ // parent = input step
    						String oldChildrenOutputSteps = parentStep.getChildrenOutputSteps();
        					String newChildStepRef = childStep.toString();
        					String newChildrenOutputSteps = oldChildrenOutputSteps.replace(oldChildStepRef, newChildStepRef);
        					parentStep.setChildrenOutputSteps(newChildrenOutputSteps);

    						childStep.setParentRefStep("[" + parentStep.getActionSequence() + "]");
    						String refPlcHolder = childStep.getParentPlaceHolder();
    						for(LFOutputTag outputTag : childStep.getOverrideTags()){
    							if(outputTag.getTagID().equals(refPlcHolder)){
    								outputTag.setTagValue("@IP[" + parentStep.getActionSequence() + "]"); //inputStep
    								ApplicationContext.getTestcaseHelper().getOutputTagModel().fireTableDataChanged();
    								break;
    							}
    						}
    					}
    				}
    			}
    		}
    	}else{
    		for(LFOutputMsg parentStep : testcaseHelper.getOutputStepModel().getData()){
    			// update each reference child step
    			ArrayList<ChildStepEntry> childStepEntryList = tempStepRefMap.get(parentStep.getTempRefactorID());
    			if(childStepEntryList != null){
    				for(ChildStepEntry childStepEntry : childStepEntryList){ //update every child Step of the parent
    					String oldChildStepRef = childStepEntry.getOldChildStepRef();
    					LFOutputMsg childStep = childStepEntry.getChildStep();
    					String oldChildrenOutputSteps = parentStep.getChildrenOutputSteps();
    					String newChildStepRef = childStep.toString();
    					String newChildrenOutputSteps = oldChildrenOutputSteps.replace(oldChildStepRef, newChildStepRef);
    					parentStep.setChildrenOutputSteps(newChildrenOutputSteps);
    					childStep.setParentRefStep("[" + parentStep.getActionSequence() + "][" + parentStep.getOutputMsgID() + "]");
    					String refPlcHolder = childStep.getParentPlaceHolder();
    					for(LFOutputTag outputTag : childStep.getOverrideTags()){
    						if(outputTag.getTagID().equals(refPlcHolder)){
    							outputTag.setTagValue("@OP[" + parentStep.getActionSequence() + "][" + parentStep.getOutputMsgID() + "]"); 
    							ApplicationContext.getTestcaseHelper().getOutputTagModel().fireTableDataChanged();
    							break;
    						}
    					}
    				}
    			}
    		}
    	}
    }

	private void populateTempRefStepMap(boolean parentIsInputStep){
		tempStepRefMap.clear();
		if(parentIsInputStep){
			for(LFTestInputSteps inputStep : testcaseHelper.getInputStepModel().getData()){
				inputStep.setTempRefactorID(UUID.randomUUID()); //reset temp UUID
				ArrayList<ChildStepEntry> childEntryStepList = new ArrayList<ChildStepEntry>();
				for(String refStepStr : inputStep.getChildrenStepsArray()){
					int[] stepArr = parseStep(refStepStr);
					int childInputStepNum = stepArr[0]-1;
					int childOutputStepNum = stepArr[1]-1;
					LFOutputMsg childStep = testcaseHelper.getInputStepModel().getData().get(childInputStepNum).getOutputStepList().get(childOutputStepNum);
					childEntryStepList.add(new ChildStepEntry(refStepStr, childStep));
				}
				
				//every outputMsg in the inputstep
				for(LFOutputMsg outputStep : inputStep.getOutputStepList()){
					for(String refStepStr : outputStep.getChildrenStepsArray()){
						int[] stepArr = parseStep(refStepStr);
						int childInputStepNum = stepArr[0]-1;
						int childOutputStepNum = stepArr[1]-1;
						LFOutputMsg childStep = testcaseHelper.getInputStepModel().getData().get(childInputStepNum).getOutputStepList().get(childOutputStepNum);
						childEntryStepList.add(new ChildStepEntry(refStepStr, childStep));
					}
				}
				tempStepRefMap.put(inputStep.getTempRefactorID(), childEntryStepList);
			}
		}else{
			for(LFOutputMsg parentStep : testcaseHelper.getOutputStepModel().getData()){
				parentStep.setTempRefactorID(UUID.randomUUID()); //reset temp UUID
				ArrayList<ChildStepEntry> childEntryStepList = new ArrayList<ChildStepEntry>();
				for(String refStepStr : parentStep.getChildrenStepsArray()){
					int[] stepArr = parseStep(refStepStr);
					int childInputStepNum = stepArr[0]-1;
					int childOutputStepNum = stepArr[1]-1;
					LFOutputMsg childStep = testcaseHelper.getInputStepModel().getData().get(childInputStepNum).getOutputStepList().get(childOutputStepNum);
					childEntryStepList.add(new ChildStepEntry(refStepStr, childStep));
				}
				tempStepRefMap.put(parentStep.getTempRefactorID(), childEntryStepList);
			}
		}
	}
	
	private int[] parseStep(String refChildStepStr){
		String step = refChildStepStr;
		step = step.replace("[", "");
		String[] tokens = step.split("]");
		int[] stepArr = new int[tokens.length];
		for(int i = 0; i < tokens.length; i++){
			stepArr[i] = Integer.parseInt(tokens[i]);
		}
		return stepArr;
	}

	protected void stepLinkButtonActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
//		if (inputStepTable.getSelectedRow() != -1 && outputStepTable.getSelectedRow() != -1) {
//			testcaseHelper.addStepLink(inputStepTable.getSelectedRow(), outputStepTable.getSelectedRow());
//		}else{
//			JOptionPane.showMessageDialog(AutoPilotAppl.getApplication().getMainFrame(), "Please select an output step to link to.");
//		}
		testcaseHelper.addStepLink(inputStepTable.getSelectedRow(), outputStepTable.getSelectedRow());
	}

	protected void addLabelButtonActionPerformed(ActionEvent evt) {
		
		LFTestCase testcase = ApplicationContext.getTestcasePanel().getTestCase();
		if(DBUtil.getInstance().getTcm().getTestCase(testcase.getTestID()) == null)
		{
			final JFrame frame = new JFrame();
			JOptionPane.showMessageDialog(frame, "Save the test case first before adding Label!!!");
			return ;
		}
		ArrayList<String> optionArrayList = new ArrayList<String>();
		optionArrayList.add("New Label");
		for(LFLabel lb : DBUtil.getInstance().getLbm().getAvailableLabelsForTestcase(testcase.getTestID())){
			optionArrayList.add(lb.getLabel());
		}
		Object[] possibilities = optionArrayList.toArray();
		String label = (String)JOptionPane.showInputDialog(
				AutoPilotAppl.getApplication().getMainFrame(),
		                    "Please choose a label that you want to add to:",
		                    "Add label to test case",
		                    JOptionPane.QUESTION_MESSAGE,
		                    null,
		                    possibilities,
		                    "New Label");
		
		if(label != null){
			if(label.equals("New Label")){
				TestCaseTreeNode newLabelNode = ApplicationContext.getTestRunPanel().createNewLabel();
				if(newLabelNode != null){
					ApplicationContext.getTestRunPanel().addTestCaseToLabel(newLabelNode.getName(), testcase);
					loadLabelIntoTestCase(newLabelNode.getLabel().getLabel());
					ApplicationContext.getTestRunPanel().incrementNodeCount(newLabelNode.getName());
				}
			}else{ //add to existing label
				TestCaseTreeNode labelNode = ApplicationContext.getTestRunPanel().getTestCaseTreeNodeMap().get(label);
				if(labelNode != null){
					ApplicationContext.getTestRunPanel().addTestCaseToLabel(label, testcase);
					loadLabelIntoTestCase(labelNode.getLabel().getLabel());
					ApplicationContext.getTestRunPanel().incrementNodeCount(labelNode.getName());
				}
			}
		}
	}
	
	protected void loadLabelIntoTestCase(String labelName){
		
		StyledDocument doc = (StyledDocument)labelsTextPane.getDocument();

		labelsTextPane.insertIcon(new ImageIcon(InputTestCasePanel.class.getResource("/com/citigroup/liquifi/autopilot/gui/resources/icons/label.png")));
		try {
			doc.insertString(doc.getLength(), labelName + "  ", null);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}

	}

	protected void testcaseNameTextFieldKeyReleased() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
		}
	}

	protected void descriptionTextAreaKeyReleased() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);		}
	}

	protected void releaseNumTextFieldKeyReleased() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);		}
	}

	protected void appNameComboBoxActionPerformed() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);		}
	}

	protected void noRadioButtonActionPerformed() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);		}
	}

	protected void yesRadioButtonActionPerformed() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);		}
	}

	protected void securityClassComboBoxActionPerformed() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);		}
	}

	protected void regionComboBoxActionPerformed() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);		}
	}

	protected void categoryComboBoxActionPerformed() {
		if(hasSavedTestCase){
			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);	
		}
		
	}

	protected void addOutputStepSmartTag(ActionEvent evt) {

		int selectedInputStepIdx = inputStepTable.getSelectedRow();
		int selectedOutputStepIdx = outputStepTable.getSelectedRow();
		
		if (selectedInputStepIdx != -1 && selectedOutputStepIdx != -1){
			testcaseHelper.addOutputputStepSmartTag(selectedInputStepIdx, selectedOutputStepIdx);
		}
		
	}

	protected void addInputStepSmartTag(ActionEvent evt) {
		
		int selecteInputStepIdx = inputStepTable.getSelectedRow();
		if (selecteInputStepIdx != -1){
			testcaseHelper.addInputStepSmartTag(selecteInputStepIdx);
		}
	}

	private void initColumnWidth(){
		setupColumn();
	}
	
	private void setupColumn() {
		
		// Set cell editor for input template to be ComboBox
		TableColumn inputTemplateColumn = inputStepTable.getColumnModel().getColumn(1);
		JComboBox templateComboBox = new JComboBox();
		templateMap = DBUtil.getInstance().getTem().getInputTemplateMap();
		templateComboBox.setModel(new javax.swing.DefaultComboBoxModel(templateMap.keySet().toArray(new String[templateMap.keySet().size()])));
		inputTemplateColumn.setCellEditor(new DefaultCellEditor(templateComboBox));
			
		
		// Set cell editor for msgType to be ComboBox
		TableColumn messagTypeColumn = inputStepTable.getColumnModel().getColumn(3);
		JComboBox msgTypeComboBox = new JComboBox();
		msgTypeComboBox.addItem("FixMsg");
		msgTypeComboBox.addItem("XML");
		msgTypeComboBox.addItem("Others");
		messagTypeColumn.setCellEditor(new DefaultCellEditor(msgTypeComboBox));
		
		
		// Set cell editor for output template to be ComboBox
		TableColumn outputTemplateColumn = outputStepTable.getColumnModel().getColumn(1);
		JComboBox outTemplateComboBox = new JComboBox();
		outTemplateMap = DBUtil.getInstance().getTem().getOutputTemplateMap();
		outTemplateComboBox.setModel(new javax.swing.DefaultComboBoxModel(outTemplateMap.keySet().toArray(new String[outTemplateMap.keySet().size()])));
		outputTemplateColumn.setCellEditor(new DefaultCellEditor(outTemplateComboBox));
		
		
	}

private void testcaseNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testcaseNameTextFieldKeyTyped
// TODO add your handling code here:
	if(testcaseNameTextField.getBackground() !=  ColorUIResource.WHITE){
		if(!testcaseNameTextField.getText().isEmpty()){
			testcaseNameTextField.setBackground(Color.WHITE);
		}
	}
}//GEN-LAST:event_testcaseNameTextFieldKeyTyped

private void releaseNumTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_releaseNumTextFieldKeyTyped
	if(releaseNumTextField.getBackground() !=  ColorUIResource.WHITE){
		if(!releaseNumTextField.getText().isEmpty()){
			releaseNumTextField.setBackground(Color.WHITE);
		}
	}
}//GEN-LAST:event_releaseNumTextFieldKeyTyped

private void descriptionTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionTextAreaKeyTyped
	if(descriptionTextArea.getBackground() !=  ColorUIResource.WHITE){
		if(!descriptionTextArea.getText().isEmpty()){
			descriptionTextArea.setBackground(Color.WHITE);
		}
	}
}//GEN-LAST:event_descriptionTextAreaKeyTyped

private void securityClassStateChange(java.awt.event.ItemEvent evt) {
	if(securityClassComboBox.getBackground() !=  ColorUIResource.WHITE){
		if(securityClassComboBox.getSelectedIndex()!=-1){
			securityClassComboBox.setBackground(Color.WHITE);
		}
	}
}

private ValidationObject currentlyRunningTestCaseState;

public void stopCurrentTestCase(String msg) {
	if (currentlyRunningTestCaseState != null) { // terminate currently running test case if any
    	TestCaseController.INSTANCE.terminateTestCase(currentlyRunningTestCaseState);
    	currentlyRunningTestCaseState = null;
	}
	
	indicateTestCaseCompletion(msg);
}

private void startTestcase(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTestcase
    if (testCaseStartButton.isSelected()) {
        stopCurrentTestCase("");
    	// START
        setRunTestCaseUiState(true);
        LFTestCase testCase = ApplicationContext.getTestcasePanel().getTestCase();
        currentlyRunningTestCaseState = TestCaseController.INSTANCE.loadState(testCase, testCaseSymbolTextBox.getText());
        
        if(currentlyRunningTestCaseState == null) {
        	stopCurrentTestCase("Exception throw by the engine! Please consult the log.");
        } else {
        	PlaceHolders.addSymFiiMap(testCaseSymbolTextBox.getText());
        	testCaseRunStatusTextBox.setText("Test Started. Click \"Next\" button to send first message.");
	        inputStepTable.getSelectionModel().setSelectionInterval(0, 0);
        }
    } else {
    	stopCurrentTestCase("Test case terminated by user.");
    }
}

	public void runTestcase() {
		testCaseRunStatusTextBox.setText("Test Started");
		
		SwingUtilities.invokeLater(new Runnable() {
		    public void run() {
		    	LFTestCase testcase = getTestCase();
				currentlyRunningTestCaseState = TestCaseController.INSTANCE.runTestCase(testcase, testCaseSymbolTextBox.getText(), true, false);
				indicateTestCaseCompletion(null);
		    }
		});
		
	}

/**
 * Set the state of user interface elements to reflect whether a test case is running or not.
 * @param state true  means "set ui state to indicate a test case is running"
 *              false means "set ui state to indicate a test case is not running"
 */
private void setRunTestCaseUiState(boolean state) {
	org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.citigroup.liquifi.AutoPilotAppl.class).getContext().getResourceMap(InputTestCasePanel.class);
	
	if (state) { // indicate test case running
		testCaseNextButton.setEnabled(true);
        testCaseSymbolTextBox.setEnabled(false);
        testCaseStartButton.setIcon(resourceMap.getIcon("testCaseStopButton.icon"));
        testCaseStartButton.setText(resourceMap.getString("testCaseStopButton.text"));
        if (!testCaseStartButton.isSelected()) {
        	testCaseStartButton.setSelected(true);
        }
	} else { // indicate test case not running
		testCaseNextButton.setEnabled(false);
        testCaseSymbolTextBox.setEnabled(true);
        testCaseStartButton.setIcon(resourceMap.getIcon("testCaseStartButton.icon"));
        testCaseStartButton.setText(resourceMap.getString("testCaseStartStopButton.text"));
        if (testCaseStartButton.isSelected()) {
        	testCaseStartButton.setSelected(false);
        }
	}
}

private void nextTestcaseStep(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTestcaseStep
	testCaseNextButton.setEnabled(false);
	testCaseRunStatusTextBox.setText("Step " + (currentlyRunningTestCaseState.getInputStepNumber() + 1) + " running...");
	
    TestCaseRunNextStepTask task = new TestCaseRunNextStepTask();
	task.execute();
}

private void addOutputStep(java.awt.event.ActionEvent evt) {
	// Add an output step only if an input step has been selected.
	// -1 tells the helper to add the output step to the end of the steps
	if (inputStepTable.getSelectedRow() != -1) {
		testcaseHelper.addOutputStep(inputStepTable.getSelectedRow(), -1);
	}
}

private void removeOutputStep(java.awt.event.ActionEvent evt) {                                  
	// Remove an output step only if an input and output step has been selected
	if (inputStepTable.getSelectedRow() != -1 && outputStepTable.getSelectedRow() != -1){
		testcaseHelper.removeOutputStep(outputStepTable.getSelectedRow());
	}

	ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
}



private void outPutStepTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outPutStepTableMouseReleased
    if (evt.isPopupTrigger()){
		inputTablePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
		inputClick = false;
	}
}//GEN-LAST:event_outPutStepTableMouseReleased


private void hightLightTextField1KeyReleased(java.awt.event.KeyEvent evt) {
    if(KeyEvent.VK_ENTER == evt.getKeyCode()){
        ApplicationContext.getTestcaseHelper().highlight(((JTextField) evt.getComponent()) == hightLightTextField1);
	}
}


class TestCaseRunNextStepTask extends SwingWorker<Boolean, Void>{
	@Override
	protected Boolean doInBackground() throws Exception {
    	return TestCaseController.INSTANCE.runTestCaseNextStep(currentlyRunningTestCaseState, true, false);
	}

	@Override
	public void done() {
		try {
			// could have been stopped before testcase had stopped executing
			if(currentlyRunningTestCaseState != null) {
				if (get()) { // step succeeded
					if (currentlyRunningTestCaseState.hasNext()) { // more steps
						testCaseNextButton.setEnabled(true);
						testCaseRunStatusTextBox.setText("Step " + currentlyRunningTestCaseState.getInputStepNumber() + " succeeded.");
						inputStepTable.getSelectionModel().setSelectionInterval(currentlyRunningTestCaseState.getInputStepNumber(), currentlyRunningTestCaseState.getInputStepNumber());
					} else { // no more steps, record successful test
						TestCaseController.INSTANCE.passTestCase(currentlyRunningTestCaseState);
						TestCaseController.INSTANCE.finishTestCase(currentlyRunningTestCaseState);

						ApplicationContext.getTestcaseHelper().setInputStepTableRowPointer(-1);
						ApplicationContext.getTestcaseHelper().setOutputStepTableRowPointer(-1);
						inputStepTable.clearSelection();
						indicateTestCaseCompletion(null);
					}
				} else { // test failed, test failure already recorded (in the runNextStep method)
					TestCaseController.INSTANCE.finishTestCase(currentlyRunningTestCaseState);
					indicateTestCaseCompletion(null);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

	/**
	 * Update the user interface to indicate that a test case has stopped running (either successfully, or because of failure).
	 * @param message the text to show in the Test Case Message Box
	 */
	public void indicateTestCaseCompletion(String message) {
		if(message != null) {
			testCaseRunStatusTextBox.setText(message);
		}
		
		setRunTestCaseUiState(false);
		
		if(currentlyRunningTestCaseState != null) {
			if(message == null) {
				if(currentlyRunningTestCaseState.isSuccess()) {
					testCaseRunStatusTextBox.setText("Test succeeded :-)");
				} else {
					StringBuffer buffer = new StringBuffer("Step " + currentlyRunningTestCaseState.getInputStepNumber() + " failed: ");
					if(currentlyRunningTestCaseState.getFailedOutputMsgID() == 0) {
						buffer.append("IP["+currentlyRunningTestCaseState.getInputStepNumber()+ "] ");
					} else {
						buffer.append("OP["+currentlyRunningTestCaseState.getFailedInputStep()+"][" + currentlyRunningTestCaseState.getFailedOutputMsgID()+ "] ");
					}
					buffer.append(currentlyRunningTestCaseState.getValidationResultMsg());
					
					testCaseRunStatusTextBox.setText(buffer.toString());
				}
			}
			
			List<ValidationObject> selectedTestcases = new ArrayList<ValidationObject>();
			selectedTestcases.add(currentlyRunningTestCaseState);
			ApplicationContext.getResultPanel().reload(selectedTestcases);
		}
		
		currentlyRunningTestCaseState = null;
	}

	private void addOutputStepTag(java.awt.event.ActionEvent evt) {
		// Add an output tag only if an input step and output step have been selected
		if (inputStepTable.getSelectedRow() != -1 && outputStepTable.getSelectedRow() != -1) {
			testcaseHelper.addOutputStepTag();
		}
		
		ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
	}

	private void removeOutputStepTag(java.awt.event.ActionEvent evt){
//		if (inputStepTable.getSelectedRow() != -1 && outputStepTable.getSelectedRow() != -1 && outputTagTable.getSelectedRow() != -1) {
//			testcaseHelper.removeOutputStepTag(outputTagTable.convertRowIndexToModel(outputTagTable.getSelectedRow()));
//		}
		
		if(outputStepTable.getSelectedRow() != -1){
			int[] selectedRowIdxes = outputTagTable.getSelectedRows();
			
			for(int idx = selectedRowIdxes.length-1; idx >= 0; idx--){
				testcaseHelper.removeOutputStepTag(outputTagTable.convertRowIndexToModel(selectedRowIdxes[idx]));
			}
		}
		
		ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
	}

	private void addInputStepTag(java.awt.event.ActionEvent evt) {
		// Only add an input tag is an input step has been selected
		if (inputStepTable.getSelectedRow() != -1){
			testcaseHelper.addInputStepTag();
		}
		
		ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
	}

	private void removeInputStepTag(java.awt.event.ActionEvent evt) {
//		if (inputStepTable.getSelectedRow() != -1 && inputTagTable.getSelectedRow() != -1) {
//			testcaseHelper.removeInputStepTag(inputTagTable.convertRowIndexToModel(inputTagTable.getSelectedRow()));
		//		}

		if(inputStepTable.getSelectedRow() != -1){
			int[] selectedRowIdxes = inputTagTable.getSelectedRows();
			
			for(int idx = selectedRowIdxes.length-1; idx >= 0; idx--){
				testcaseHelper.removeInputStepTag(inputTagTable.convertRowIndexToModel(selectedRowIdxes[idx]));
			}
		}
		
		ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
	}
	

	private void addInputStep(java.awt.event.ActionEvent evt) {
		// -1 tells the helper to add to the end of the steps
		testcaseHelper.addInputStep(-1);
	}
	

	private void removeInputStep(java.awt.event.ActionEvent evt) {
	    // Remove an input step only if one has been selected
		// vk72487 made it run for multiple row deletes.
		
		int originalStepSelected = inputStepTable.getSelectedRow();
		if (originalStepSelected != -1){
			
			int[] selectedRowIdxes = inputStepTable.getSelectedRows();
			
			for(int idx = 0; idx <= selectedRowIdxes.length-1; idx++){
				int relativeStepId = selectedRowIdxes[idx]  - idx; // -idx so that new step numbers can be adjusted from the old selected row indexes. 
				testcaseHelper.removeInputStep(relativeStepId);
				}
		}
		
		ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
	}
	
	private void removeStepMenuItem(java.awt.event.ActionEvent evt) {
		if(inputClick) {
			removeInputStep(evt);
		} else {
			removeOutputStep(evt);
		}
	}
	
	private void insertStepMenuItem(java.awt.event.ActionEvent evt) {
		if(inputClick) {
			if (inputStepTable.getSelectedRow() != -1){
				testcaseHelper.addInputStep(inputStepTable.getSelectedRow());
			}
		} else {
			if(outputStepTable.getSelectedRow() != -1 && inputStepTable.getSelectedRow() != -1) {
				testcaseHelper.addOutputStep(inputStepTable.getSelectedRow(), outputStepTable.getSelectedRow());
			}
		}
	}

	
	private void inputStepTableMouseReleased(java.awt.event.MouseEvent evt) {
		if (evt.isPopupTrigger()){
			inputClick = true;
			inputTablePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
		}
	}




	public void updateLastEditedUser(String lastEditedUser){
		this.lastEditedUserTextField.setText(lastEditedUser);
	}

	public LFTestCase getTestCase() {
		String testIDString = testIDTextField.getText();
		LFTestCase testcase = testcaseHelper.getTestcase();
		
		testcase.setAppName((String) appNameComboBox.getSelectedItem());
		testcase.setTestID(testIDString);
		testcase.setName(testcaseNameTextField.getText());
		testcase.setDescription(descriptionTextArea.getText());
		testcase.setCategory((String)categoryComboBox.getSelectedItem());
		testcase.setRegion((String)regionComboBox.getSelectedItem());
		testcase.setReleaseNum(releaseNumTextField.getText());
		testcase.setJiraNum(jiraTextField.getText());
		testcase.setLastEditedUser(lastEditedUserTextField.getText());
		if(((String) securityClassComboBox.getSelectedItem()) != null && ((String) securityClassComboBox.getSelectedItem()).length() >0){
			testcase.setSecurityClass(Integer.parseInt((String)securityClassComboBox.getSelectedItem()));
		}
		if (buttonGroup1.getSelection() == yesRadioButton.getModel()){
			testcase.setActive('Y');
		}else{
			testcase.setActive('N');
		}
		
		
		/*List<LFTestInputSteps> inputStepList = testcaseHelper.getInputStepTableModel().getData();
		
		for(LFTestInputSteps inputStep : inputStepList){
			inputStep.setTestID(testIDString);
			List<LFOutputMsg> outputStepList = inputStep.getOutputStepList();
			List<TagI> inputTagSet = inputStep.getInputTagsValueList();
			
			for(TagI tag : inputTagSet){
				tag.setTestID(testIDString);
			}
			
			for(LFOutputMsg outputStep : outputStepList){
				outputStep.setTestID(testIDString);
				
				for(TagI tag : outputStep.getOutputTagList()){
					tag.setTestID(testIDString);
				}
			}
			
			
		}
		*/

		return testcase;
	}
	
	public static class ValidationResponse {
		public final boolean valid;
		public final String reason;
		
		public ValidationResponse(boolean valid, String reason) {
			this.valid = valid;
			this.reason = reason;
		}
	}
	
	private final ValidationResponse valid = new ValidationResponse(true, null);
	private final ValidationResponse invalidEmpty = new ValidationResponse(false, "ERROR: Required fields cannot be empty");
	private final ValidationResponse invalidTitleLength = new ValidationResponse(false, "ERROR: Title can only be length 50");
	
	public ValidationResponse validateForm() {
		boolean emptyCheck = false;
		
		if (testcaseNameTextField.getText().isEmpty()){
			emptyCheck = true;
			testcaseNameTextField.setBackground(ColorUIResource.YELLOW);
		}
		
		if (releaseNumTextField.getText().isEmpty()){
			emptyCheck = true;
			releaseNumTextField.setBackground(ColorUIResource.YELLOW);
		}
		
		if (descriptionTextArea.getText().isEmpty()){
			emptyCheck = true;
			descriptionTextArea.setBackground(ColorUIResource.YELLOW);
		}
		
		if (jiraTextField.getText().isEmpty()){
			emptyCheck = true;
			jiraTextField.setBackground(ColorUIResource.YELLOW);
		}
		
		if(emptyCheck) {
			return invalidEmpty;
		}
		
		if (testcaseNameTextField.getText().length() > 50) {
			testcaseNameTextField.setBackground(ColorUIResource.YELLOW);
			return invalidTitleLength;
		}
		
		return valid;
	}
	
	public void resetComponentColor() {
		testcaseNameTextField.setBackground(ColorUIResource.WHITE);
		releaseNumTextField.setBackground(ColorUIResource.WHITE);
		descriptionTextArea.setBackground(ColorUIResource.WHITE);
		jiraTextField.setBackground(ColorUIResource.WHITE);
	}


	public void tableChanged(TableModelEvent tablemodelevent) {
	}
	
	public boolean jiraNumIsSet(){
		return (this.jiraTextField.getText().length() > 0);
	}


	public void setTestcase(LFTestCase testcase) {
		clear();
		//update category list
		categoryList = DBUtil.getInstance().getTcm().getCategory();
		categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel(categoryList.toArray(new String[categoryList.size()])));
        jiraTextField.setText(testcase.getJiraNum());
        lastEditedUserTextField.setText(testcase.getLastEditedUser());
		testcaseHelper.setTestcase(testcase);
		appNameComboBox.setSelectedItem(testcase.getAppName());
		testIDTextField.setText(testcase.getTestID());
		testcaseNameTextField.setText(testcase.getName());
		descriptionTextArea.setText(testcase.getDescription());
		categoryComboBox.setSelectedItem(testcase.getCategory());
		releaseNumTextField.setText(testcase.getReleaseNum());
		regionComboBox.setSelectedItem(testcase.getRegion());
		securityClassComboBox.setSelectedItem(String.valueOf(testcase.getSecurityClass()));
		descriptionTextArea.setCaretPosition(0);
		if(testcase.getActive() == 'Y'){
			yesRadioButton.setSelected(true);
		}else{
			noRadioButton.setSelected(true);
		}
		
		hasSavedTestCase = true;
		origCategory = testcase.getCategory();
		setLabels();
	}
	
	public void setLabels(){
		LFTestCase testcase = ApplicationContext.getTestcasePanel().getTestCase();
//		ArrayList<String> labelList = ApplicationContext.getTestRunPanel().findAllLabelForTestCase(testcase);
//		for(String label : labelList){
//			loadLabelIntoTestCase(label);
//		}
		labelsTextPane.setText("");
		List<LFLabel> labelSet = DBUtil.getInstance().getLbm().getLabelsForTestcase(testcase.getTestID());
		for(LFLabel label : labelSet){
			loadLabelIntoTestCase(label.getLabel());
		}
	}

	private void clear() {
		hasSavedTestCase = false;
		origCategory = null;
		appNameComboBox.setSelectedIndex(0);
		testIDTextField.setText("");
		testcaseNameTextField.setText("");
		descriptionTextArea.setText("");
		categoryComboBox.setSelectedIndex(0);
		regionComboBox.setSelectedIndex(0);
		releaseNumTextField.setText("");
		labelsTextPane.setText("");
	}
	
	
	
	public void setInputStepTableRowPointer(int inputStepTableRowPointer) {
		testcaseHelper.setInputStepTableRowPointer(inputStepTableRowPointer);
	}
	
	public void setDefaultValues() {
		securityClassComboBox.setSelectedItem(ApplicationContext.getConfig().getDefaultSecurityClass());
	}
	
	
	
	
	
	private class RowListener implements ListSelectionListener {
		private JTable selectedTable;

		public RowListener(JTable table){
			selectedTable = table;
		}

		public void valueChanged(ListSelectionEvent event) {
			if (!event.getValueIsAdjusting()) {
				if(selectedTable == inputStepTable){
					testcaseHelper.setInputStepTableRowPointer(inputStepTable.getSelectedRow());
				} else if (selectedTable == outputStepTable){
					testcaseHelper.setOutputStepTableRowPointer(outputStepTable.getSelectedRow());
				}

			}
		}
	}

	public JTextPane getTextArea(int number) {
		if(number == 1) {
			return jTextPane1;
		}
		
		return jTextPane2;
	}
	
	public JTextField getHighlightField(int number) {
		if(number == 1) {
			return hightLightTextField1;
		} else {
			return hightLightTextField;
		}
	}
	
	public JTable getInputStepTable() {
		return inputStepTable;
	}
	
	public JTable getOutputStepTable() {
		return outputStepTable;
	}
	
	private void editStepInTestCase() {
		if(inputClick && inputStepTable.getSelectedRow() != -1){
			testcaseHelper.editInputStep(inputStepTable.getSelectedRow());
		} else if(inputStepTable.getSelectedRow() != -1 && outputStepTable.getSelectedRow() != -1){
			testcaseHelper.editOutputStep(outputStepTable.getSelectedRow());
		}
	}

	public void createNewTestcase() {
		LFTestCase testcase = new LFTestCase();
		testcase.setTestID(Util.getTestIDSequencer());
		
		testcaseHelper.setTestcase(testcase);
		testcaseHelper.createDefaultSteps();
		
		setTestcase(testcase);
	}
	
	public LFTestCase createDuplicateTestcase(String name) {
		LFTestCase clone = testcaseHelper.getTestcaseClone();
		//update the count of the category node of the new case
		//ApplicationContext.getTestRunPanel().getTestCaseTreeNodeMap().get(clone.getCategory()).incrementCaseCount();
		ApplicationContext.getTestRunPanel().incrementNodeCount(clone.getCategory());
		ApplicationContext.getTestRunPanel().incrementNodeCount("All");
		clone.setName(name);
		setTestcase(clone);
		return clone;
	}
	
	protected void addStylesToDocument(StyledDocument doc) {
        Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
        Style regular = doc.addStyle("regular", def);
        StyleConstants.setFontFamily(def, "SansSerif");

        Style s = doc.addStyle("common_tag_tmpl", regular);
        StyleConstants.setItalic(s, true);
        StyleConstants.setForeground(s, Color.BLUE);

        s = doc.addStyle("common_tag_step", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setItalic(s, true);
        StyleConstants.setForeground(s, Color.BLUE);
        
        s = doc.addStyle("common_tag_tmpl_unset", regular);
        StyleConstants.setItalic(s, true);
        StyleConstants.setStrikeThrough(s, true);
        StyleConstants.setForeground(s, Color.BLUE);

        s = doc.addStyle("common_tag_step_unset", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setItalic(s, true);
        StyleConstants.setStrikeThrough(s, true);
        StyleConstants.setForeground(s, Color.BLUE);

        s = doc.addStyle("overwritten_tag", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setForeground(s, Color.MAGENTA);
        
        s = doc.addStyle("overwritten_tag_unset", regular);
        StyleConstants.setBold(s, true);
        StyleConstants.setStrikeThrough(s, true);
        StyleConstants.setForeground(s, Color.MAGENTA);

    }
	
	public String getOrigCaseCategory(){
		return this.origCategory;
	}
	
	public void updateCaseCategoryCount(){
		String curCategory = (String) categoryComboBox.getSelectedItem();
		if(!curCategory.equals(origCategory)){
			ApplicationContext.getTestRunPanel().incrementNodeCount(curCategory);
			ApplicationContext.getTestRunPanel().decrementNodeCount(origCategory);
			if(origCategory == null || origCategory.length() == 0){
				ApplicationContext.getTestRunPanel().incrementNodeCount("All");
			}
		}
	}
	
	public void toShowCommentsToolTip(boolean toShow){
		this.toShowCommentToolTip = toShow;
	}
	

	public HashMap<String, InputStepsClipboard> getClipboardsMap() {
		return clipboardsMap;
	}
	
//	public HashMap<Integer, Integer> getRefactoredStepMap() {
//		return refactoredStepMap;
//	}
//
//	public void setRefactoredStepMap(HashMap<Integer, Integer> refactoredStepMap) {
//		this.refactoredStepMap = refactoredStepMap;
//	}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton addRowButton1;
    private javax.swing.JButton addRowButton2;
    private javax.swing.JButton addRowButton3;
    private javax.swing.JComboBox appNameComboBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox categoryComboBox;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JButton deleteRowButton1;
    private javax.swing.JButton deleteRowButton2;
    private javax.swing.JButton deleteRowButton3;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JTextField hightLightTextField;
    private javax.swing.JTextField hightLightTextField1;
    private javax.swing.JTable inputStepTable;
    private javax.swing.JPopupMenu inputTablePopupMenu;
    private javax.swing.JTable inputTagTable;
    private javax.swing.JMenuItem insertMenuItem;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JRadioButton noRadioButton;
    private javax.swing.JTable outputStepTable;
    private javax.swing.JTable outputTagTable;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JScrollPane popupScrollPane;
    private javax.swing.JTextArea popupTextArea;
    private javax.swing.JComboBox regionComboBox;
    private javax.swing.JTextField releaseNumTextField;
    private javax.swing.JComboBox securityClassComboBox;
    private javax.swing.JButton testCaseNextButton;
    private javax.swing.JTextField testCaseRunStatusTextBox;
    private javax.swing.JToggleButton testCaseStartButton;
    private javax.swing.JTextField testCaseSymbolTextBox;
    private javax.swing.JTextField testIDTextField;
    private javax.swing.JLabel testcaseNameLabel;
    private javax.swing.JTextField testcaseNameTextField;
    private javax.swing.JRadioButton yesRadioButton;
	private List<String> appNameList;
	private List<String> categoryList;
	private TestCaseHelper testcaseHelper = ApplicationContext.getTestcaseHelper();;
	private Map<String, LFTemplate> templateMap;
	private Map<String, LFTemplate> outTemplateMap;
	private JButton inputStepSmartTagButton;
	private JTextPane labelsTextPane;
	private JLabel jiraLabel;
	private JTextField jiraTextField;
	
	private boolean inputClick = true;
	private boolean hasSavedTestCase = false;
	private String origCategory = null;
	private boolean toShowCommentToolTip = false;
	
	private HashMap<String, InputStepsClipboard> clipboardsMap = new HashMap<String, InputStepsClipboard>();
	//private HashMap<Integer, Integer> refactoredStepMap = new HashMap<Integer, Integer>();
	private HashMap<UUID, ArrayList<ChildStepEntry>> tempStepRefMap = new HashMap<UUID, ArrayList<ChildStepEntry>>();

	private JButton stepLinkButton;
	private JButton btnRemoveLabel;
	private JLabel lblLastEditedBy;
	private JTextField lastEditedUserTextField;
	
	private class ChildStepEntry{
		String oldChildStepRef;
		LFOutputMsg childStep;
		
		public ChildStepEntry(String oldChildStepRef, LFOutputMsg childStep){
			this.oldChildStepRef = oldChildStepRef;
			this.childStep = childStep;
		}
		
		public String getOldChildStepRef() {
			return oldChildStepRef;
		}

		public LFOutputMsg getChildStep() {
			return childStep;
		}
	}
}
