package com.citigroup.liquifi.autopilot.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;

import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.controller.Message;
import com.citigroup.liquifi.autopilot.controller.StepMessages;
import com.citigroup.liquifi.autopilot.controller.ValidationObject;
import com.citigroup.liquifi.autopilot.logger.AceLogger;
import com.citigroup.liquifi.autopilot.message.FIXMessage;
import com.citigroup.liquifi.entities.LFTestInputSteps;
import com.citigroup.liquifi.util.AutoPilotConstants;

public class TestResultPanel extends javax.swing.JPanel {
	private static final long serialVersionUID = 1L;
	/** Creates new form TestResultPanel */
    public TestResultPanel() {
        initComponents();
        init();
    }

    private void init() {
    	logger = AceLogger.getLogger(this.getClass().getSimpleName());
       	DefaultMutableTreeNode root = new DefaultMutableTreeNode("TestCaseList");
       	testcaseTree.setModel(new DefaultTreeModel (root));
       	testcaseTree.setCellRenderer(new CustomCellRenderer());
       	msgPanel = new MessagePanel();
       	add(msgPanel, java.awt.BorderLayout.EAST);
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusButtonGroup = new javax.swing.ButtonGroup();
        mainResultPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        passRadioButton = new javax.swing.JRadioButton();
        failRadioButton = new javax.swing.JRadioButton();
        failedInfoPanel = new javax.swing.JPanel();
        failedStepLabel = new javax.swing.JLabel();
        failedStepTextField = new javax.swing.JTextField();
        failedReasonLabel = new javax.swing.JLabel();
        failedReasonTextField = new javax.swing.JTextField();
        msgLabel = new javax.swing.JLabel();
        fixMsgScrollPane = new javax.swing.JScrollPane();
        fixMsgTable = new javax.swing.JTable();
        validateScrollPane = new javax.swing.JScrollPane();
        actualMessageTable = new javax.swing.JTable();
        treePanel = new javax.swing.JPanel();
        testcaseScrollPane = new javax.swing.JScrollPane();
        testcaseTree = new javax.swing.JTree();
        logToolBar = new javax.swing.JToolBar();
        logPanel = new javax.swing.JPanel();
        logScrollPane = new javax.swing.JScrollPane();
        logEditorPane = new javax.swing.JEditorPane();

        setEnabled(false);
        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        mainResultPanel.setName("mainResultPanel"); // NOI18N

        statusPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        statusPanel.setName("statusPanel"); // NOI18N

        jLabel1.setText("Result Status: ");
        jLabel1.setName("jLabel1"); // NOI18N

        statusButtonGroup.add(passRadioButton);
        passRadioButton.setSelected(true);
        passRadioButton.setText("Pass");
        passRadioButton.setEnabled(false);
        passRadioButton.setName("passRadioButton"); // NOI18N

        statusButtonGroup.add(failRadioButton);
        failRadioButton.setText("Fail");
        failRadioButton.setEnabled(false);
        failRadioButton.setName("failRadioButton"); // NOI18N

        failedInfoPanel.setName("failedInfoPanel"); // NOI18N

        failedStepLabel.setText("Failed Step:");
        failedStepLabel.setName("failedStepLabel"); // NOI18N

        failedStepTextField.setEditable(false);
        failedStepTextField.setName("failedStepTextField"); // NOI18N

        failedReasonLabel.setText("Failed Reason:");
        failedReasonLabel.setName("failedReasonLabel"); // NOI18N

        failedReasonTextField.setEditable(false);
        failedReasonTextField.setName("failedReasonTextField"); // NOI18N

        javax.swing.GroupLayout failedInfoPanelLayout = new javax.swing.GroupLayout(failedInfoPanel);
        failedInfoPanel.setLayout(failedInfoPanelLayout);
        failedInfoPanelLayout.setHorizontalGroup(
            failedInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(failedInfoPanelLayout.createSequentialGroup()
                .addGroup(failedInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(failedInfoPanelLayout.createSequentialGroup()
                        .addComponent(failedStepLabel)
                        .addGap(18, 18, 18)
                        .addComponent(failedStepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(failedInfoPanelLayout.createSequentialGroup()
                        .addComponent(failedReasonLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(failedReasonTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)))
                .addContainerGap())
        );
        failedInfoPanelLayout.setVerticalGroup(
            failedInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(failedInfoPanelLayout.createSequentialGroup()
                .addGroup(failedInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(failedStepLabel)
                    .addComponent(failedStepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(failedInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(failedReasonLabel)
                    .addComponent(failedReasonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(failedInfoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(failRadioButton)))
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(passRadioButton)
                    .addComponent(failRadioButton))
                .addGap(6, 6, 6)
                .addComponent(failedInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        msgLabel.setText("In/Out Messages:");
        msgLabel.setName("msgLabel"); // NOI18N

        fixMsgScrollPane.setName("fixMsgScrollPane"); // NOI18N

        fixMsgTable.setModel(ApplicationContext.getOutputValidationModel());
        fixMsgTable.setName("fixMsgTable"); // NOI18N
        fixMsgScrollPane.setViewportView(fixMsgTable);

        validateScrollPane.setName("validateScrollPane"); // NOI18N

        actualMessageTable.setModel(ApplicationContext.getMessageTableModel());
        actualMessageTable.setName("actualMessageTable"); // NOI18N
        validateScrollPane.setViewportView(actualMessageTable);
        actualMessageTable.getSelectionModel().addListSelectionListener(new RowListener());

        javax.swing.GroupLayout mainResultPanelLayout = new javax.swing.GroupLayout(mainResultPanel);
        mainResultPanel.setLayout(mainResultPanelLayout);
        mainResultPanelLayout.setHorizontalGroup(
            mainResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainResultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fixMsgScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                    .addComponent(statusPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(msgLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validateScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainResultPanelLayout.setVerticalGroup(
            mainResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainResultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(validateScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(fixMsgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(mainResultPanel, java.awt.BorderLayout.CENTER);

        treePanel.setName("treePanel"); // NOI18N

        testcaseScrollPane.setName("testcaseScrollPane"); // NOI18N

        testcaseTree.setName("testcaseTree"); // NOI18N
        testcaseTree.addTreeSelectionListener(new APTreeSelectionListener());
        testcaseScrollPane.setViewportView(testcaseTree);

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testcaseScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testcaseScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(treePanel, java.awt.BorderLayout.WEST);

        logToolBar.setRollover(true);
        logToolBar.setName("logToolBar"); // NOI18N

        logPanel.setName("logPanel"); // NOI18N

        logScrollPane.setName("logScrollPane"); // NOI18N

        logEditorPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        logEditorPane.setName("logEditorPane"); // NOI18N
        logScrollPane.setViewportView(logEditorPane);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 997, Short.MAX_VALUE)
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
        );

        // is an empty pane
        //logToolBar.add(logPanel);
        //add(logToolBar, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private DefaultMutableTreeNode createNodes(List<ValidationObject> testcaseList){
    	DefaultMutableTreeNode root = new DefaultMutableTreeNode("[ROOT]");
        DefaultMutableTreeNode testcase = null;
        DefaultMutableTreeNode inputStep = null;
        
        for(ValidationObject tCase : testcaseList){
        	testcase = new DefaultMutableTreeNode(tCase);

        	
        	for(LFTestInputSteps input : tCase.getTestcase().getInputStepList()){
        		inputStep = new DefaultMutableTreeNode(input);
        		testcase.add(inputStep);
        	}
        	root.add(testcase);
        }
        
        return root;
    }
    
    public void reload(List<ValidationObject> selectedTestcases){
    	((DefaultTreeModel)testcaseTree.getModel()).setRoot(createNodes(selectedTestcases));
    }
    
    public void populateStatusPanel(ValidationObject vo){
    	boolean pass = vo.isSuccess();
//    	boolean pass = new Random().nextBoolean();
    	String failedStep = vo.getFailedInputStep() + "." + vo.getFailedOutputMsgID();
    	String reason = vo.getValidationResultMsg();
    	
    	if (pass){
    		passRadioButton.setSelected(true);
    		failedInfoPanel.setVisible(false);
    	}else{
    		failRadioButton.setSelected(true);
    		failedStepTextField.setText(failedStep);
    		failedReasonTextField.setText(reason);
    		failedInfoPanel.setVisible(true);
    	}
    
    }
    
	private void populateMessagePanel(ValidationObject vo) {
		// TODO Auto-generated method stub
		ApplicationContext.getMessageTableModel().getData().clear();
		
	}
    
    public void populateMessagePanel(ValidationObject vo, int stepNum){
    	//List<ValidationInputStep> inputList = vo.getActualInputMsgList();
    	ApplicationContext.getMessageTableModel().clear();
    	ApplicationContext.getOutputValidationModel().clear();
    	
    	StepMessages stepMessages = vo.getStepMessages(stepNum);
    	   	
    	if(stepMessages != null){
           	Message inboundMsg = vo.getInboundStep(stepNum);
    		
           	if(inboundMsg != null) {
	           	LFTestInputSteps step = vo.getTestcase().getInputStep().get(stepNum-1);
	    		
	    		if(step.getMsgType().equals(AutoPilotConstants.MSG_TYPE_FIXMSG)){
	    			FIXMessage fixMsg = new FIXMessage(inboundMsg.message);
	    			ApplicationContext.getMessageTableModel().addRow("INBOUND", inboundMsg.topic, fixMsg);
	    		}
           	}

    		List<Message> actual = stepMessages.getActualSortedMessages();
    		
    		for(Message output : actual){
    			FIXMessage fixMsg = new FIXMessage(output.message);
    			ApplicationContext.getMessageTableModel().addRow((output.assigned == Message.UNASSIGNED ? "FAIL" : "SUCCESS"), output.topic, fixMsg);
    		}

    		for (int i = 0; i < stepMessages.getExpectedMessages().size(); i++){
    			int outStepNum = i+1;
    			FIXMessage expFixMsg = new FIXMessage(stepMessages.getExpectedMessages().get(i).message);
    			
    			if (actual.size() > i && actual.get(i) != null){
    				FIXMessage fixMsg = new FIXMessage(actual.get(i).message);

    				Map<String,String> expTagMap = expFixMsg.getTagMap();
    				Map<String,String> actualTagMap = fixMsg.getTagMap();

    				for(String tagID: expTagMap.keySet()){
    					if(!isIgnoreTag(tagID))
    						ApplicationContext.getOutputValidationModel().addRow(outStepNum, tagID, expTagMap.get(tagID), actualTagMap.get(tagID));
    				}
    			}
    			
    		}
    		
    	}

   
    	this.repaint();
    }
    
    
    private boolean isIgnoreTag(String tagID){
    	boolean ignoreTag = false;
    	List<String> ignoreTagList = new ArrayList<String>();
    	ignoreTagList.add("10");
    	ignoreTagList.add("9");
    	ignoreTagList.add("8");
    	if (ignoreTagList.contains(tagID))
    		ignoreTag = true;
    	return ignoreTag;
    }
    
    
    public class APTreeSelectionListener implements TreeSelectionListener{

		public void valueChanged(TreeSelectionEvent e) {
			 DefaultMutableTreeNode node = (DefaultMutableTreeNode) testcaseTree.getLastSelectedPathComponent();
			 
			 if(node == null || node.isRoot()) {
				 return;
			 }
			 
			 Object nodeInfo = node.getUserObject();
			 
			 if (node.isLeaf()){
				 ValidationObject vo = ((ValidationObject)((DefaultMutableTreeNode)node.getParent()).getUserObject());
				 LFTestInputSteps step = (LFTestInputSteps) nodeInfo;
				 //logger.info("TestID " + step.getTestID() + " InputStep # " + step.getActionSequence() + "selected");
				 populateStatusPanel(vo);
				 populateMessagePanel(vo, step.getActionSequence());
			 }else {
				 ValidationObject vo = (ValidationObject)nodeInfo;
				 //logger.info("TestID " + vo.getTestcase().getTestID() + " selected");
				 populateStatusPanel(vo);
				 populateMessagePanel(vo);
			 }
			 
		}
    }
    
    
    private class RowListener implements ListSelectionListener{

		public void valueChanged(ListSelectionEvent e) {
			int rowIndex = actualMessageTable.getSelectedRow();
			if(rowIndex != -1){
				String messageStr = ApplicationContext.getMessageTableModel().getMessageList().get(rowIndex).toString();
				String[] splits = messageStr.split(AutoPilotConstants.FIX_SEPERATOR);
				messageStr = "";
				for(String split : splits) {
					messageStr = messageStr + split + "\n";
				}
				msgPanel.setText(messageStr);
			}
		}
    	
    }
    
    
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable actualMessageTable;
    private javax.swing.JRadioButton failRadioButton;
    private javax.swing.JPanel failedInfoPanel;
    private javax.swing.JLabel failedReasonLabel;
    private javax.swing.JTextField failedReasonTextField;
    private javax.swing.JLabel failedStepLabel;
    private javax.swing.JTextField failedStepTextField;
    private javax.swing.JScrollPane fixMsgScrollPane;
    private javax.swing.JTable fixMsgTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JEditorPane logEditorPane;
    private javax.swing.JPanel logPanel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JToolBar logToolBar;
    private javax.swing.JPanel mainResultPanel;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JRadioButton passRadioButton;
    private javax.swing.ButtonGroup statusButtonGroup;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JScrollPane testcaseScrollPane;
    private javax.swing.JTree testcaseTree;
    private javax.swing.JPanel treePanel;
    private javax.swing.JScrollPane validateScrollPane;
    // End of variables declaration//GEN-END:variables
    
    private AceLogger logger;
    private MessagePanel msgPanel;
	public javax.swing.JEditorPane getLogEditorPane() {
		return logEditorPane;
	}

	public void setLogEditorPane(javax.swing.JEditorPane logEditorPane) {
		this.logEditorPane = logEditorPane;
	}

}

class CustomCellRenderer extends JLabel implements TreeCellRenderer {
	private static final long serialVersionUID = 1L;
	private ImageIcon tickImage = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("resources/icons/tick-glow.png")));
	private ImageIcon crossImage = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("resources/icons/cross-glow.png")));
	private boolean	bSelected;

	
	public Component getTreeCellRendererComponent(JTree tree, Object value, boolean bSelected, boolean bExpanded, boolean bLeaf, int iRow, boolean bHasFocus) {
		setSize(500, 50);

		this.bSelected = bSelected;

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;

		if (node.isRoot()) {
			setForeground(Color.black);
			setIcon(null);
			setText(" Test Case Results");
		} else if (node.isLeaf()) {
			LFTestInputSteps step = (LFTestInputSteps)node.getUserObject();
			
			setForeground(Color.black);
			setIcon(null);
			setText("Step # " + step.getActionSequence());
		} else {
			ValidationObject validationObject = (ValidationObject)node.getUserObject();
			
			if (validationObject.isSuccess()) {
				setForeground(Color.black);
				setIcon(tickImage);
				setText(validationObject.getTestcase().getName());
			} else {
				setForeground(Color.red);
				setIcon(crossImage);
				setText(validationObject.getTestcase().getName());
			}
		}

		return this;
	}
	
	public void paint( Graphics g ) {
		Color		bColor;

		// Set the correct background color
		bColor = bSelected ? Color.lightGray : Color.white;
		g.setColor( bColor );

		// Draw a rectangle in the background of the cell
		g.fillRect( 0, 0, getWidth() - 1, getHeight() - 1 );

		super.paint( g );
	}


}

