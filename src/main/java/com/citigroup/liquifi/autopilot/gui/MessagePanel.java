/*
 * MessagePanel.java
 *
 * Created on September 17, 2008, 3:37 PM
 */

package com.citigroup.liquifi.autopilot.gui;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.StringTokenizer;

import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Highlighter;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.Highlighter.HighlightPainter;

import com.citigroup.liquifi.util.AutoPilotConstants;

/**
 *
 * @author  zy63334
 */
public class MessagePanel extends javax.swing.JPanel {
	private static final long serialVersionUID = 1L;

	/** Creates new form MessagePanel */
	public MessagePanel() {
		initComponents();
	}


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        highLightLabel = new javax.swing.JLabel();
        hightLightTextField = new javax.swing.JTextField();
        tagValueCheckBox = new javax.swing.JCheckBox();
        boldPHCheckBox = new javax.swing.JCheckBox();
        msgScrollPane = new javax.swing.JScrollPane();
        msgTextPane = new javax.swing.JTextPane();

        setBackground(new java.awt.Color(255, 255, 255));
        setName("Form"); // NOI18N

        highLightLabel.setText("HighLight:");
        highLightLabel.setName("highLightLabel"); // NOI18N

        hightLightTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        hightLightTextField.setName("hightLightTextField"); // NOI18N
        hightLightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hightLightTextFieldKeyReleased(evt);
            }
        });

        tagValueCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        tagValueCheckBox.setSelected(true);
        tagValueCheckBox.setText("Tag Values");
        tagValueCheckBox.setEnabled(false);
        tagValueCheckBox.setName("tagValueCheckBox"); // NOI18N

        boldPHCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        boldPHCheckBox.setSelected(true);
        boldPHCheckBox.setText("Bold PlaceHolders");
        boldPHCheckBox.setName("boldPHCheckBox"); // NOI18N
        boldPHCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldPHCheckBoxActionPerformed(evt);
            }
        });

        msgScrollPane.setName("msgScrollPane"); // NOI18N

        msgTextPane.setName("msgTextPane"); // NOI18N
        msgScrollPane.setViewportView(msgTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(highLightLabel)
                        .addGap(18, 18, 18)
                        .addComponent(hightLightTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(tagValueCheckBox)
                        .addGap(28, 28, 28)
                        .addComponent(boldPHCheckBox)))
                .addContainerGap(16, Short.MAX_VALUE))
            .addComponent(msgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(msgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boldPHCheckBox)
                    .addComponent(tagValueCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hightLightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(highLightLabel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void hightLightTextFieldKeyReleased(java.awt.event.KeyEvent evt) {
		removeHighlight();
		if(KeyEvent.VK_ENTER == evt.getKeyCode()){
			StringTokenizer st = new StringTokenizer(hightLightTextField.getText(), ";");
			while (st.hasMoreTokens()){
				String tagID = st.nextToken();
				highlightText(tagID + "=");
			}
		}
	}

	private void boldPHCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
		if(boldPHCheckBox.isSelected()){
			boldText(AutoPilotConstants.PLACEHOLDER_SEPERATOR , true);
		}else{
			boldText(AutoPilotConstants.PLACEHOLDER_SEPERATOR , false);
		}
	}

	public void highlightText(String text){
		Highlighter hilite = msgTextPane.getHighlighter();

		StringTokenizer st = new StringTokenizer(msgTextPane.getText());
		while (st.hasMoreTokens()){
			String token = st.nextToken();
			if(token.startsWith(text)){
				int startPos = msgTextPane.getText().indexOf(token);
				int endPos = startPos + token.length();
				try {
					hilite.addHighlight(startPos,endPos, highlighPainter);
				} catch (BadLocationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}	
		}
	}

	public void removeHighlight(){
		Highlighter hilite = msgTextPane.getHighlighter();
                hilite.removeAllHighlights();
        }

        
	private void boldText(String placeHolderChar, boolean bold) {

		StyledDocument doc = msgTextPane.getStyledDocument();
		MutableAttributeSet attrs = msgTextPane.getInputAttributes();
		StyleConstants.setBold(attrs, bold);
		
		
		StringTokenizer st = new StringTokenizer(msgTextPane.getText(), "\n");
		while (st.hasMoreTokens()){
			String token = st.nextToken();
			if(token.contains(placeHolderChar)){
				int offset = msgTextPane.getText().indexOf(token.trim());
				doc.setCharacterAttributes(offset, token.trim().length(), attrs, true);
			}
		}
	}



	public void setText(String text){
		boldText(AutoPilotConstants.PLACEHOLDER_SEPERATOR, false);
		
		msgTextPane.setText(text);

		if(boldPHCheckBox.isSelected()){
			boldText(AutoPilotConstants.PLACEHOLDER_SEPERATOR, true);
		}
		
		StringTokenizer st = new StringTokenizer(hightLightTextField.getText(), ";");
		while (st.hasMoreTokens()){
			String tagID = st.nextToken();
			highlightText(tagID + "=");
		}
	
	}
	
	public JTextPane getMsgTextPane(){
		return msgTextPane;
	}
	


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boldPHCheckBox;
    private javax.swing.JLabel highLightLabel;
    private javax.swing.JTextField hightLightTextField;
    private javax.swing.JScrollPane msgScrollPane;
    private javax.swing.JTextPane msgTextPane;
    private javax.swing.JCheckBox tagValueCheckBox;
    // End of variables declaration//GEN-END:variables

    private HighlightPainter highlighPainter = new DefaultHighlightPainter(Color.YELLOW);

 
}
