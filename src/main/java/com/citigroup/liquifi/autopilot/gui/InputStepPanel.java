/*
 * inputStepPanel.java
 *
 * Created on July 31, 2008, 11:57 AM
 */

package com.citigroup.liquifi.autopilot.gui;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import com.citigroup.liquifi.AutoPilotAppl;
import com.citigroup.liquifi.autopilot.bootstrap.ApplicationContext;
import com.citigroup.liquifi.autopilot.gui.model.CommonTagTableModel;
import com.citigroup.liquifi.autopilot.messaging.AutoPilotBrokerInfo;
import com.citigroup.liquifi.autopilot.socket.ClientSocket;
import com.citigroup.liquifi.entities.LFCommonOverwriteTag;
import com.citigroup.liquifi.entities.LFTemplate;
import com.citigroup.liquifi.entities.LFTestInputSteps;
import com.citigroup.liquifi.util.AutoPilotConstants;
import com.citigroup.liquifi.util.DBUtil;

public class InputStepPanel extends JPanel implements TableModelListener {
	private static final long serialVersionUID = 1L;
	private int defaultTopicID = 0;

	public InputStepPanel() {
		initDB();
		initComponents();
	}

	private void initDB() {
		commonTagTableModel = ApplicationContext.getCommonTagTableModel();
		commonOverwriteTagMap = DBUtil.getInstance().getCom().getCommonOverwriteTagMap();

		templateMap = DBUtil.getInstance().getTem().getInputTemplateMap();
		String defaultTopic = null;

		Map<String, AutoPilotBrokerInfo> topicList = ApplicationContext.getBrokerFactory().getInitiatorBrokerMapping();
		for (String topic : topicList.keySet()) {
			if (topicList.get(topic).isDefaultTopic()) {
				defaultTopic = topic;
			}
			topicID.add(topic);
		}

		if (ApplicationContext.getSocketFactory() != null) {
			List<ClientSocket> sockets = ApplicationContext.getSocketFactory().getSockets();
			for (ClientSocket socket : sockets) {
				topicID.add(socket.getInbound());
			}
		}

		Collections.sort(topicID);

		// find position of default topic
		if (defaultTopic != null) {
			for (int i = 0; i < topicID.size(); i++) {
				if (topicID.get(i).equals(defaultTopic)) {
					defaultTopicID = i;
				}
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		saveDialog = new JDialog();
		msgLabel = new JLabel();
		okButton = new JButton();
		jLabel1 = new JLabel();
		stepNumTextField = new JTextField();
		jLabel2 = new JLabel();
		templateComboBox = new JComboBox();
		jLabel3 = new JLabel();
		msgTypeComboBox = new JComboBox();
		jLabel4 = new JLabel();
		jScrollPane1 = new JScrollPane();
		messageTextArea = new JTextArea();
		jLabel7 = new JLabel();	
		saveButton = new JButton();

		topicComboBox = new JComboBox();
		cancelButton = new JButton();
		useTemplateCheckBox = new JCheckBox();
		jLabel8 = new JLabel();
		commonTagListComboBox = new JComboBox();
		jScrollPane3 = new JScrollPane();
		commonTagTable = new JTable();

		templateOverviewTextArea = new JTextArea();

		saveDialog.setName("saveDialog"); // NOI18N

		// org.jdesktop.application.ResourceMap resourceMap =
		// org.jdesktop.application.Application.getInstance(com.citigroup.liquifi.AutoPilotAppl.class).getContext().getResourceMap(InputStepPanel.class);
		msgLabel.setText("Save Successful. Entry added to Database.");
		msgLabel.setName("msgLabel"); // NOI18N

		okButton.setText("OK"); // NOI18N
		okButton.setName("okButton"); // NOI18N
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout saveDialogLayout = new GroupLayout(saveDialog.getContentPane());
		saveDialog.getContentPane().setLayout(saveDialogLayout);
		saveDialogLayout.setHorizontalGroup(saveDialogLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(saveDialogLayout.createSequentialGroup()
						.addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(saveDialogLayout.createSequentialGroup().addGap(42, 42, 42)
										.addComponent(msgLabel))
								.addGroup(saveDialogLayout.createSequentialGroup().addGap(113, 113, 113)
										.addComponent(okButton)))
						.addContainerGap(36, Short.MAX_VALUE)));
		saveDialogLayout
				.setVerticalGroup(
						saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(saveDialogLayout.createSequentialGroup().addGap(27, 27, 27)
										.addComponent(msgLabel, GroupLayout.PREFERRED_SIZE, 42,
												GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18).addComponent(okButton)
										.addContainerGap(23, Short.MAX_VALUE)));

		setName("Form"); // NOI18N

		jLabel1.setText("Step #"); // NOI18N
		jLabel1.setName("jLabel1"); // NOI18N

		stepNumTextField.setEditable(false);
		stepNumTextField.setText("stepNumTextField"); // NOI18N
		stepNumTextField.setName("stepNumTextField"); // NOI18N

		jLabel2.setText("Template"); // NOI18N
		jLabel2.setName("jLabel2"); // NOI18N

		templateComboBox.setModel(new DefaultComboBoxModel(DBUtil.getInstance().getTem().getInputTemplateMap().keySet()
				.toArray(new String[DBUtil.getInstance().getTem().getInputTemplateMap().keySet().size()])));
		templateComboBox.setName("templateComboBox"); // NOI18N
		templateComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				templateComboBoxActionPerformed(evt);
			}
		});

		jLabel3.setText("Msg Type"); // NOI18N
		jLabel3.setName("jLabel3"); // NOI18N

		msgTypeComboBox.setModel(new DefaultComboBoxModel(new String[] { "FixMsg", "XML", "CONTROL", "Others" }));
		// String msgType =
		// templateMap.get((String)templateComboBox.getSelectedItem()).getMsgType();
		msgTypeComboBox.setSelectedItem("XML");
		msgTypeComboBox.setName("msgTypeComboBox"); // NOI18N

		jLabel4.setText("Message"); // NOI18N
		jLabel4.setName("jLabel4"); // NOI18N

		jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPane1.setName("jScrollPane1"); // NOI18N

		messageTextArea.setColumns(20);
		messageTextArea.setLineWrap(true);
		messageTextArea.setRows(5);
		messageTextArea.setText("MessageTextArea"); // NOI18N
		messageTextArea.setWrapStyleWord(true);
		messageTextArea.setName("messageTextArea"); // NOI18N
		jScrollPane1.setViewportView(messageTextArea);

		jLabel7.setText("TopicID"); // NOI18N
		jLabel7.setName("jLabel7"); // NOI18N

		saveButton.setText("Save"); // NOI18N
		saveButton.setName("saveButton"); // NOI18N
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});

		topicComboBox.setModel(new DefaultComboBoxModel(topicID.toArray()));
		topicComboBox.setSelectedIndex(defaultTopicID);
		topicComboBox.setName("topicComboBox"); // NOI18N

		cancelButton.setText("Cancel"); // NOI18N
		cancelButton.setName("cancelButton"); // NOI18N
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		useTemplateCheckBox.setSelected(true);
		useTemplateCheckBox.setText("Use Template"); // NOI18N
		useTemplateCheckBox.setName("useTemplateCheckBox"); // NOI18N
		useTemplateCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				useTemplateCheckBoxActionPerformed(evt);
			}
		});

		jLabel8.setName("jLabel8"); // NOI18N

		commonTagListComboBox.setModel(new DefaultComboBoxModel(
				(String[]) commonOverwriteTagMap.keySet().toArray(new String[commonOverwriteTagMap.keySet().size()])));
		commonTagListComboBox.addItem(AutoPilotConstants.ComboBoxEmptyItem);
		commonTagListComboBox.setName("commonTagListComboBox"); // NOI18N
		commonTagListComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				commonTagListComboBoxActionPerformed(evt);
			}
		});

		jScrollPane3.setName("jScrollPane3"); // NOI18N

		commonTagTable.setModel(commonTagTableModel);
		commonTagTable.setName("commonTagTable"); // NOI18N
		commonTagTable.getModel().addTableModelListener(this);
		TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(commonTagTable.getModel());
		commonTagTable.setRowSorter(sorter);
		jScrollPane3.setViewportView(commonTagTable);

		commentsLabel = new JLabel("Comments");

		templateUsageLabel = new JLabel("Template Overview");

		commentsTextField = new JTextField();
		commentsTextField.setColumns(10);

		templateOverviewTextArea = new JTextArea();
		templateOverviewTextArea.setEditable(false);
		templateOverviewTextArea.setColumns(20);
		templateOverviewTextArea.setLineWrap(true);
		templateOverviewTextArea.setRows(5);

		GroupLayout layout = new GroupLayout(this);
		layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup()
				.addGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup()
						.addGap(26)
						.addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(jLabel1)
								.addComponent(jLabel2).addComponent(jLabel3).addComponent(jLabel4).addComponent(jLabel7)
								.addComponent(commentsLabel).addComponent(templateUsageLabel))
						.addGap(65)
						.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(stepNumTextField, GroupLayout.PREFERRED_SIZE, 81,
										GroupLayout.PREFERRED_SIZE)
								.addGroup(layout.createSequentialGroup().addGroup(layout
										.createParallelGroup(Alignment.LEADING, false)
										.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
										.addComponent(topicComboBox, GroupLayout.PREFERRED_SIZE, 244,
												GroupLayout.PREFERRED_SIZE)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
														.addComponent(msgTypeComboBox, Alignment.LEADING, 0,
																GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(templateComboBox, Alignment.LEADING, 0, 246,
																Short.MAX_VALUE))
												.addGap(40).addComponent(useTemplateCheckBox))
										.addGap(40).addComponent(commentsTextField)
										.addComponent(templateOverviewTextArea))
										.addGap(39)
										.addGroup(layout.createParallelGroup(Alignment.LEADING)
												.addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 299,
														GroupLayout.PREFERRED_SIZE)
												.addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 115,
														GroupLayout.PREFERRED_SIZE)
												.addComponent(commonTagListComboBox, 0, 299, Short.MAX_VALUE)))))
						.addGroup(layout.createSequentialGroup().addGap(147).addComponent(saveButton).addGap(37)
								.addComponent(cancelButton)))
				.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(42)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(jLabel1).addComponent(
								stepNumTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE))
				.addGap(18)
				.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(jLabel2)
						.addComponent(templateComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(useTemplateCheckBox))
				.addGap(18)
				.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(jLabel3)
						.addComponent(msgTypeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel8))
				.addGap(18)
				.addGroup(layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(jLabel7).addComponent(
								topicComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup()
								.addComponent(commonTagListComboBox, GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)))
				.addGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup()
						.addGap(23)
						.addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(jLabel4).addComponent(
								jScrollPane1, GroupLayout.PREFERRED_SIZE, 192, GroupLayout.PREFERRED_SIZE))
						.addGap(15)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(commentsLabel)
								.addComponent(commentsTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE))
						.addGap(20)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(templateUsageLabel)
								.addComponent(templateOverviewTextArea, GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGap(12)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(saveButton)
								.addComponent(cancelButton))
						.addGap(35))
						.addGroup(layout.createSequentialGroup().addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
								.addContainerGap()))));
		this.setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	private boolean validateData() {
		boolean valid = true;
		if (!useTemplateCheckBox.isSelected() && messageTextArea.getText().equals("")) {
			valid = false;
		}
		return valid;
	}

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {

		boolean valid = validateData();

		if (valid) {
			int actionSequence = Integer.parseInt(stepNumTextField.getText());
			inputStep.setActionSequence(actionSequence);
			if (useTemplateCheckBox.isSelected()) {
				inputStep.setTemplate((String) templateComboBox.getSelectedItem());
			} else {
				inputStep.setTemplate(null);
			}

			inputStep.setMessage(messageTextArea.getText().replace("\n", ""));
			inputStep.setMsgType((String) msgTypeComboBox.getSelectedItem());
			inputStep.setTopicID((String) topicComboBox.getSelectedItem());
			inputStep.setComments(commentsTextField.getText());

			String commonTagSelection = (String) commonTagListComboBox.getSelectedItem();
			if (commonTagSelection.equals(AutoPilotConstants.ComboBoxEmptyItem)) {
				inputStep.setCommonTags(null);
			} else {
				inputStep.setCommonTags(commonTagSelection);
			}

			clearButtonActionPerformed();

			ApplicationContext.getTestcaseHelper().updateInputStep(inputStep);
			ApplicationContext.getTestcasePanel().getInputStepTable()
					.setRowSelectionInterval(inputStep.getActionSequence() - 1, inputStep.getActionSequence() - 1);

			((AutoPilotApplView) AutoPilotAppl.getApplication().getMainView()).showMainPanel();

			ApplicationContext.getTestcaseHelper().setTestCaseChangesSavedStatus(false);
		} else {
			msgLabel.setText("Required Fields are not Populated");
			AutoPilotAppl.getApplication().show(saveDialog);
		}

	}

	private void clearButtonActionPerformed() {
		messageTextArea.setText("");
		commentsTextField.setText("");
	}

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		clearButtonActionPerformed();

		if (isNew) {
			ApplicationContext.getTestcaseHelper().removeInputStep(Integer.valueOf(stepNumTextField.getText()) - 1);
		}

		((AutoPilotApplView) AutoPilotAppl.getApplication().getMainView()).showMainPanel();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void useTemplateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_useTemplateCheckBoxActionPerformed
		resetForm();
	}// GEN-LAST:event_useTemplateCheckBoxActionPerformed

	private void commonTagListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_commonTagListComboBoxActionPerformed
		// TODO add your handling code here:
		List<LFCommonOverwriteTag> listTag = commonOverwriteTagMap.get(commonTagListComboBox.getSelectedItem());
		if (listTag != null) {
			// set the list of CommonTag to the tableModel of the Tag grid
			Set<LFCommonOverwriteTag> setTag = new HashSet<LFCommonOverwriteTag>();
			for (LFCommonOverwriteTag tagLocal : listTag) {
				setTag.add(tagLocal);
			}
			if (setTag != null) {
				commonTagTableModel.getData().clear();
				commonTagTableModel.setData(setTag);
			}
		} else {
			commonTagTableModel.getData().clear();
			commonTagTableModel.setData(new LinkedHashSet<LFCommonOverwriteTag>());
		}
	}// GEN-LAST:event_commonTagListComboBoxActionPerformed

	private void templateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
		String msgType = templateMap.get((String) templateComboBox.getSelectedItem()).getMsgType();
		msgTypeComboBox.setSelectedItem(msgType);
		String comboValue = templateComboBox.getSelectedItem().toString();
		templateOverviewTextArea.setText(DBUtil.getInstance().getTemplateDescription(comboValue));
	}

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
		saveDialog.setVisible(false);
	}

	private void resetForm() {
		if (useTemplateCheckBox.isSelected()) {
			messageTextArea.setEnabled(false);
			messageTextArea.setEditable(false);
			templateComboBox.setEnabled(true);
			msgTypeComboBox.setEnabled(false);
		} else {
			messageTextArea.setEnabled(true);
			messageTextArea.setEditable(true);
			templateComboBox.setEnabled(false);
			msgTypeComboBox.setEnabled(true);
		}
	}

	public void populateForm(LFTestInputSteps inputStep, boolean isNew) {
		this.inputStep = inputStep;
		this.isNew = isNew;
		stepNumTextField.setText(String.valueOf(inputStep.getActionSequence()));
		messageTextArea.setText(inputStep.getMessage());
		commentsTextField.setText(inputStep.getComments());

		if (inputStep.getTemplate() != null) {
			for (int i = 0; i < templateComboBox.getModel().getSize(); i++) {
				if (inputStep.getTemplate().equals((String) templateComboBox.getModel().getElementAt(i))) {
					templateComboBox.setSelectedIndex(i);
					useTemplateCheckBox.setSelected(true);
					break;
				}
			}
		} else {
			if (isNew) {
				useTemplateCheckBox.setSelected(true);
			} else {
				useTemplateCheckBox.setSelected(false);
			}
		}

		if (inputStep.getMsgType() != null) {
			for (int i = 0; i < msgTypeComboBox.getModel().getSize(); i++) {
				if (inputStep.getMsgType().equals((String) msgTypeComboBox.getModel().getElementAt(i))) {
					msgTypeComboBox.setSelectedIndex(i);
					break;
				}
			}
		}

		if (inputStep.getTopicID() != null) {
			String topicString = inputStep.getTopicID();

			if (inputStep.getTopicID() != null) {
				for (int i = 0; i < topicComboBox.getModel().getSize(); i++) {
					if (topicString.equals((String) topicComboBox.getModel().getElementAt(i))) {
						topicComboBox.setSelectedIndex(i);
						break;
					}
				}
			}
		}

		if (inputStep.getCommonTags() != null) {
			for (int i = 0; i < commonTagListComboBox.getModel().getSize(); i++) {
				if (inputStep.getCommonTags().equals((String) commonTagListComboBox.getModel().getElementAt(i))) {
					commonTagListComboBox.setSelectedIndex(i);
					break;
				}
			}
		} else {
			commonTagListComboBox.setSelectedItem(AutoPilotConstants.ComboBoxEmptyItem);
		}

		// Set defaults for new step
		if (isNew) {
			String selectedTemplate = (String) templateComboBox.getSelectedItem();
			String templateType = templateMap.get(selectedTemplate).getMsgType();

			for (int i = 0; i < msgTypeComboBox.getModel().getSize(); i++) {
				if (templateType.equals((String) msgTypeComboBox.getModel().getElementAt(i))) {
					msgTypeComboBox.setSelectedIndex(i);
					break;
				}
			}

			commonTagListComboBox.setSelectedItem(AutoPilotConstants.ComboBoxEmptyItem);
		}
		resetForm();
	}

	public void tableChanged(TableModelEvent e) {
		// TODO Auto-generated method stub

	}

	public void resetTemplate() {
		templateComboBox.setModel(new DefaultComboBoxModel(DBUtil.getInstance().getTem().getInputTemplateMap().keySet()
				.toArray(new String[DBUtil.getInstance().getTem().getInputTemplateMap().keySet().size()])));
	}

	public void resetCommonTags() {
		commonTagListComboBox.setModel(new DefaultComboBoxModel(
				(String[]) commonOverwriteTagMap.keySet().toArray(new String[commonOverwriteTagMap.keySet().size()])));
		commonTagListComboBox.addItem(AutoPilotConstants.ComboBoxEmptyItem);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton cancelButton;
	private JComboBox commonTagListComboBox;
	private JTable commonTagTable;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JLabel jLabel4;
	private JLabel jLabel7;
	private JLabel jLabel8;
	private JScrollPane jScrollPane1;
	private JScrollPane jScrollPane3;
	private JTextArea messageTextArea;
	private JLabel msgLabel;
	private JComboBox msgTypeComboBox;
	private JButton okButton;
	private JButton saveButton;
	private JDialog saveDialog;
	private JTextField stepNumTextField;
	private JComboBox templateComboBox;
	private JComboBox topicComboBox;
	private JCheckBox useTemplateCheckBox;
	private JTextField commentsTextField;
	private JTextArea templateOverviewTextArea;
	private JLabel commentsLabel;
	private JLabel templateUsageLabel;
	// End of variables declaration//GEN-END:variables

	private Map<String, LFTemplate> templateMap = new HashMap<String, LFTemplate>();
	private ArrayList<String> topicID = new ArrayList<String>();
	private LFTestInputSteps inputStep = new LFTestInputSteps();
	private boolean isNew = true;
	private CommonTagTableModel commonTagTableModel;
	private Map<String, List<LFCommonOverwriteTag>> commonOverwriteTagMap = new TreeMap<String, List<LFCommonOverwriteTag>>();
}
