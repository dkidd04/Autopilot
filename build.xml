<project name="AutoPilot" default="install" basedir=".">
	<property name="label" value="dev-build" />
	<property file="buildrpm.properties" />
	<property name="target" value="${basedir}/target" />
	<property name="dir.dist" value="${basedir}/dist" />
	<property name="build.main.classes.dir" value="${target}/main/classes" />
	<property name="build.test.classes.dir" value="${target}/test/classes" />
	<tstamp><format property='build.time' pattern='yyyy-MM-dd HH:mm:ss'/></tstamp>
	<property name="dir.install" value="${basedir}/install" />
	<property name="dir.install.bin" value="${dir.install}/bin" />
	<property name="dir.install.etc" value="${dir.install}/etc" />
	<property name="dir.install.etc.config" value="${dir.install.etc}/config" />
	<property name="dir.install.lib" value="${dir.install}/lib" />
	<property name="dir.install.src" value="${dir.install}/src" />
	<property name="dir.unit.test.report" value="${basedir}/report" />
	<property name="dir.emma.coverage" value="${basedir}/coverage" />
	<property name="dir.emma.instr" value="${basedir}/outinstr" />
	<property name="dir.sonar.processing" value="${basedir}/.sonar" />
	<property name="dir.src" value="${basedir}/src/main/java" />
	<property name="jar.name" value="AutoPilot.jar" />

	
<!-- Start setting paths that will be used for compiling, unit testing, etc.-->
	
	<path id="lib.class.path">
		<fileset dir="${basedir}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="main.class.path">
		<pathelement location="target/main/classes" />
		<path refid="lib.class.path" />
	</path>

	<path id="test.class.path">
                <pathelement location="target/test/classes"/>
                <path refid="main.class.path"/>
        </path>


<!-- End setting paths -->	


	<!-- output some useful information regarding the build and its dependencies -->
	<echo>
	   --------------------------
    	   Application: ${name}
    	   Build File : ${ant.file} 
    	   Run By     : ${user.name}
    	   Base Dir   : ${basedir}
    	   Java Home  : ${java.home}
	   Run Date   : ${build.time}
	   --------------------------------------------------------	
	   Build Notes:
	   A) Use the version of java that you'll be running with.
	   B) Set JAVA_HOME (e.g. JAVA_HOME=/xenv/java/X/1.8.0_91l64/)
	   C) Set this version of Java on your $PATH
	   D) Set ANT_HOME (e.g. ANT_HOME=/xenv/ant/X/1.7.0)
	   --------------------------------------------------------
  	</echo>
 

	<macrodef name="compile">
		<attribute name="destDir" />
		<attribute name="srcDir" />
		<attribute name="classpath" />
		<attribute name="debug" default="false" />
		<sequential>
			<javac srcdir="@{srcDir}" destdir="@{destDir}" source="1.8" debug="@{debug}">
				<classpath>
					<path refid="@{classpath}" />
				</classpath>
			</javac>
		</sequential>
	</macrodef>
	
	<target name="clean" description="remove directories from previous builds">
		<delete failonerror="false" dir="${dir.install}" />
		<delete failonerror="false" dir="${dir.dist}" />
		<delete failonerror="false" dir="${build.classes.dir}" />
		<delete failonerror="false" dir="${target}" />
		<delete failonerror="false" dir="${rpm.builddir}" />
		<delete failonerror="false" dir="${rpm.rpmsdir}" />
		<delete failonerror="false" dir="${rpm.specdir}" />
		<delete failonerror="false" dir="${dir.unit.test.report}" />
		<delete failonerror="false" dir="${dir.emma.coverage}" />
		<delete failonerror="false" dir="${dir.emma.instr}" />
		<delete failonerror="false" dir="${dir.sonar.processing}" />
	</target>
	
	<target name="compile" depends="prepare" description="Compile the main classes and the test classes">
		<compile destDir="target/main/classes" srcDir="src" classpath="main.class.path" debug="on" />
		<!-- comment out until we have some unit test cases -->
		<!--<compile destDir="target/test/classes" srcDir="src/test/java" classpath="main.class.path" debug="on" /> -->	
	</target>

	<target name="prepare" depends="clean" description="create the directories needed for a new build">
		<mkdir dir="${dir.dist}" />
		<mkdir dir="${build.main.classes.dir}" />
		<mkdir dir="${build.test.classes.dir}" />
		<mkdir dir="${dir.install}" />
		<mkdir dir="${dir.install.lib}" />
		<mkdir dir="${dir.install.bin}" />
		<mkdir dir="${dir.install.etc}" />
		<mkdir dir="${dir.install.etc.config}" />
		<mkdir dir="${dir.install.src}" />
		<mkdir dir="${rpm.builddir}" />
		<mkdir dir="${rpm.rpmsdir}" />
		<mkdir dir="${rpm.specdir}" />
	</target>

	<!-- This is the old target that runs unit tests without emma monitoring code coverage -->
	<target name="test.unit.old" depends="compile" description="locate compiled unit tests and run them">
		
		<!-- make the directory that holds the unit test report -->
		<mkdir dir="${dir.unit.test.report}" />
	
		<junit showoutput="true">
			<formatter type="xml" usefile="true" />
			<classpath refid="test.class.path"/>
			<batchtest todir="${dir.unit.test.report}">
        			<fileset dir="target/test/classes" includes="**/*Test.class" excludes="**/test/**"/>
      			</batchtest>
		</junit>
	</target>


	<target name="jar" depends="compile" description="Take the compiled classes and package them in a jar">
		<jar jarfile="${dir.dist}/${jar.name}">
			<fileset dir="${build.main.classes.dir}" includes="**" />
		</jar>
	</target>

	<target name="rpm" depends="install" description="creates the rpm from all that is in the install dir">
		<!--  Copy the spec file with filtering -->
		<filter token="func_user" value="${func_user}" />
		<filter token="func_group" value="${func_group}" />
		<copy todir="${rpm.specdir}" file="${specfile}" filtering="true" />
		<!--  Copy the binaries to the rpm build directory 
						  -->
		<copy todir="${rpm.builddir}" overwrite="true">
			<fileset dir="${dir.install}" />
		</copy>
		<!--  rpm will look for the spec file in ${rpm.topdir}/SPECS -->
		<rpm topDir="${rpm.topdir}" rpmBuildCommand="rpmbuild" specFile="${specfile}" error="rpm.log" />
	</target>

	<target name="install" depends="prepare, jar" description="Takes the compilation output, libs, config and scripts and puts into the install dir">

		<copy todir="${dir.install.etc.config}">
			<fileset dir="${basedir}/src/main/resources/config/" includes="**/**" />
		</copy>
		<copy todir="${dir.install.bin}">
            <fileset dir="${basedir}/scripts" includes="*" />
        </copy>
		<copy todir="${dir.install}/lib">
			<fileset dir="${dir.dist}" includes="${jar.name}" />
			<fileset dir="lib" includes="*.jar" />
		</copy>
		<copy todir="${dir.install.src}">
            <fileset dir="${basedir}/src/main/java" includes="**/*.png, **/*.gif, **/*.properties" />
        </copy>
	</target>
</project>