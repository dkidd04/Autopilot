<project name="AutoPilot-1.9" default="install" basedir=".">
	<property name="label" value="dev-build" />
	<property file="buildrpm.properties" />
	<property name="target" value="${basedir}/target" />
	<property name="src.test.reports.findbugs" value="${basedir}/findBug" />
	<property name="src.test.reports.findbugs.class" value="${basedir}/findBug/class" />
	<property name="dir.dist" value="${basedir}/dist" />
	<property name="dir.bin" value="${basedir}/bin" />
	<property name="build.main.classes.dir" value="${target}/main/classes" />
	<property name="build.test.classes.dir" value="${target}/test/classes" />
	<tstamp>
		<format property='build.time' pattern='yyyy-MM-dd HH:mm:ss'/>
	</tstamp>
	<property name="dir.install" value="${basedir}/install" />
	<property name="dir.install.bin" value="${dir.install}/bin" />
	<property name="dir.install.etc" value="${dir.install}/etc" />
	<property name="dir.install.etc.config" value="${dir.install.etc}/config" />
	<property name="dir.install.lib" value="${dir.install}/lib" />
	<property name="dir.install.src" value="${dir.install}/src" />
	<property name="dir.unit.test.report" value="${basedir}/report" />
	<property name="dir.emma.coverage" value="${basedir}/coverage" />
	<property name="dir.emma.instr" value="${basedir}/outinstr" />
	<property name="dir.sonar.processing" value="${basedir}/.sonar" />
	<property name="dir.src" value="${basedir}/src/main/java" />
	<property name="jar.name" value="LiqFiAutoPilot.jar" />


	<!-- Start setting paths that will be used for compiling, unit testing, etc.-->

	<path id="lib.class.path">
		<fileset dir="${basedir}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="main.class.path">
		<pathelement location="target/main/classes" />
		<path refid="lib.class.path" />
	</path>

	<path id="test.class.path">
		<pathelement location="target/test/classes"/>
		<path refid="main.class.path"/>
	</path>


	<!-- End setting paths -->


	<!-- output some useful information regarding the build and its dependencies -->
	<echo>
	   --------------------------
    	   Application: ${name}
    	   Build File : ${ant.file} 
    	   Run By     : ${user.name}
    	   Base Dir   : ${basedir}
    	   Java Home  : ${java.home}
	   Run Date   : ${build.time}
	   --------------------------------------------------------	
	   Build Notes:
	   A) Use the version of java that you'll be running with.
	   B) Set JAVA_HOME (e.g. JAVA_HOME=/xenv/java/X/1.6.0_31l64)
	   C) Set this version of Java on your $PATH
	   D) Set ANT_HOME (e.g. ANT_HOME=/xenv/ant/X/1.7.0)
	   --------------------------------------------------------
  	</echo>


	<macrodef name="compile">
		<attribute name="destDir" />
		<attribute name="srcDir" />
		<attribute name="classpath" />
		<attribute name="debug" default="false" />
		<sequential>
			<javac srcdir="@{srcDir}" destdir="@{destDir}" source="1.6" debug="@{debug}">
				<classpath>
					<path refid="@{classpath}" />
				</classpath>
			</javac>
		</sequential>
	</macrodef>

	<target name="clean" description="remove directories from previous builds">
		<delete failonerror="false" dir="${dir.install}" />
		<delete failonerror="false" dir="${dir.dist}" />
		<delete failonerror="false" dir="${dir.bin}" />
		<delete failonerror="false" dir="${build.classes.dir}" />
		<delete failonerror="false" dir="${target}" />
		<delete failonerror="false" dir="${rpm.builddir}" />
		<delete failonerror="false" dir="${rpm.rpmsdir}" />
		<delete failonerror="false" dir="${rpm.specdir}" />
		<delete failonerror="false" dir="${dir.unit.test.report}" />
		<delete failonerror="false" dir="${dir.emma.coverage}" />
		<delete failonerror="false" dir="${dir.emma.instr}" />
		<delete failonerror="false" dir="${dir.sonar.processing}" />
	</target>

	<target name="compile" depends="prepare" description="Compile the main classes and the test classes">
		<compile destDir="target/main/classes" srcDir="src" classpath="main.class.path" debug="on" />
		<!-- comment out until we have some unit test cases -->
		<!--<compile destDir="target/test/classes" srcDir="src/test/java" classpath="main.class.path" debug="on" /> -->
	</target>

	<target name="prepare" depends="clean" description="create the directories needed for a new build">
		<mkdir dir="${dir.dist}" />
		<mkdir dir="${dir.bin}" />
		<mkdir dir="${build.main.classes.dir}" />
		<mkdir dir="${build.test.classes.dir}" />
		<mkdir dir="${dir.install}" />
		<mkdir dir="${dir.install.lib}" />
		<mkdir dir="${dir.install.bin}" />
		<mkdir dir="${dir.install.etc}" />
		<mkdir dir="${dir.install.etc.config}" />
		<mkdir dir="${dir.install.src}" />
		<mkdir dir="${rpm.builddir}" />
		<mkdir dir="${rpm.rpmsdir}" />
		<mkdir dir="${rpm.specdir}" />


	</target>

	<!-- This is the old target that runs unit tests without emma monitoring code coverage -->
	<target name="test.unit.old" depends="compile" description="locate compiled unit tests and run them">

		<!-- make the directory that holds the unit test report -->
		<mkdir dir="${dir.unit.test.report}" />

		<junit showoutput="true">
			<formatter type="xml" usefile="true" />
			<classpath refid="test.class.path"/>
			<batchtest todir="${dir.unit.test.report}">
				<fileset dir="target/test/classes" includes="**/*Test.class" excludes="**/test/**"/>
			</batchtest>
		</junit>
	</target>


	<!-- Sonar configuration section START -->

	<!-- Sonar task definition -->
	<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml" classpathref="lib.class.path" />

	<!-- connection details for the mysql database that Sonar uses -->
	<property name="sonar.jdbc.url" value="jdbc:mysql://eqliqap1d:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;maxAllowedPacket=1073741824" />
	<property name="sonar.jdbc.driverClassName" value="com.mysql.jdbc.Driver" />
	<property name="sonar.jdbc.username" value="sonar" />
	<property name="sonar.jdbc.password" value="sonar" />

	<!-- sonar server url (really only needed if its running on a remote host) -->
	<property name="sonar.host.url" value="http://eqliqap1d:9000" />

	<!-- properties to allow Sonar reuse the Emma code coverage outputs -->
	<property name="sonar.surefire.reportsPath" value="${dir.unit.test.report}"/>
	<property name="sonar.dynamicAnalysis" value="reuseReports"/>
	<property name="sonar.core.codeCoveragePlugin" value="emma"/>
	<property name="sonar.emma.reportPath" value="${dir.emma.coverage}"/>

	<!-- target to initiate the sonar analysis (static code analysis), etc. -->
	<target name="sonar" depends="test.unit">

		<sonar:sonar key="com.citi:Liquifi-Core" version="3.0" xmlns:sonar="antlib:org.sonar.ant">
			<sources location="src/main/java" />
			<binaries location="target/main/classes" />
			<tests location="src/test/java" />
			<libraries refid="lib.class.path"/>
		</sonar:sonar>

	</target>

	<!-- Sonar configuration section END -->



	<!-- unit testing and Emma code coverage section START -->

	<taskdef resource="emma_ant.properties" classpathref="lib.class.path" />

	<target name="emma.report" description="merges the emma reports into the final html coverage report">
		<emma>
			<report sourcepath="${dir.src}" >
				<fileset dir="${dir.emma.coverage}" >
					<include name="*.em" />
					<include name="*.ec" />
				</fileset>
				<xml outfile="${dir.emma.coverage}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="emma.setup" description="creates directories and lib path needed for Emma">

		<mkdir dir="${dir.emma.instr}" />
		<mkdir dir="${dir.emma.coverage}" />

		<path id="emma.class.path">
			<pathelement location="target/test/classes" />
			<pathelement location="${dir.emma.instr}" />
			<path  refid="lib.class.path"/>
		</path>

	</target>

	<target name="emma.instr" depends="compile" description="Instruments the main classes">
		<emma>
			<instr instrpath="target/main/classes"  
             			destdir="${dir.emma.instr}"  
             			metadatafile="${dir.emma.coverage}/coverage.em"  
             			merge="true" 
			/>
		</emma>
	</target>

	<target name="emma.unit.test" depends="emma.instr" description="runs the unit tests and outputs the report" >

		<!-- make the directory that holds the unit test report -->
		<mkdir dir="${dir.unit.test.report}" />

		<junit showoutput="yes" fork="yes">

			<classpath>
				<path  refid="emma.class.path"/>
			</classpath>

			<jvmarg value="-Demma.coverage.out.file=${dir.emma.coverage}/coverage-0.ec" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
			<formatter type="xml" />

			<batchtest todir="${dir.unit.test.report}">
				<fileset dir="target/test/classes" includes="**/*Test.class" excludes="**/test/**"/>
			</batchtest>
		</junit>
	</target>

	<!-- unit testing and Emma code coverage section END -->

	<!-- Ant target you invoke to run the unit tests (plus gives you emma coverage report) -->
	<target name="test.unit" depends="emma.setup, emma.unit.test, emma.report" description="runs unit tests and generates emma coverage report" />

	<target name="jar" depends="compile" description="Take the compiled classes and package them in a jar">
		<jar jarfile="${dir.dist}/${jar.name}">
			<fileset dir="${build.main.classes.dir}" includes="**" />
		</jar>
	</target>

	<target name="rpm" depends="install" description="creates the rpm from all that is in the install dir">
		<!--  Copy the spec file with filtering -->
		<filter token="func_user" value="${func_user}" />
		<filter token="func_group" value="${func_group}" />
		<copy todir="${rpm.specdir}" file="${specfile}" filtering="true" />
		<!--  Copy the binaries to the rpm build directory 
						  -->
		<copy todir="${rpm.builddir}" overwrite="true">
			<fileset dir="${dir.install}" />
		</copy>
		<!--  rpm will look for the spec file in ${rpm.topdir}/SPECS -->
		<rpm topDir="${rpm.topdir}" rpmBuildCommand="rpmbuild" specFile="${specfile}" error="rpm.log" />
	</target>

	<target name="install" depends="prepare, jar" description="Takes the compilation output, libs, config and scripts and puts into the install dir">

		<copy todir="${dir.install.etc.config}">
			<fileset dir="${basedir}/src/main/resources/config/" includes="**/**" />
		</copy>

		<copy todir="${dir.install.bin}">
			<fileset dir="${dir.bin}" includes="*" />
		</copy>

		<copy todir="${dir.install}/lib">
			<fileset dir="${dir.dist}" includes="${jar.name}" />
			<fileset dir="lib" includes="*.jar" />
		</copy>

		<copy todir="${dir.install.src}">
			<fileset dir="${basedir}/src/main/java" includes="**/*.png, **/*.gif, **/*.properties" />
		</copy>
	</target>

	<property name="findbugs.home" value="/home/aeegran/findbugs-2.0.1/lib" />
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath path="${findbugs.home}/findbugs-ant.jar" />
	</taskdef>
	<target name="findbugs" depends="jar">
		<delete dir="${src.test.reports.findbugs}"/>
		<delete dir="${src.test.reports.findbugs.class}"/>
		<mkdir  dir="${src.test.reports.findbugs}"/>
		<mkdir dir="${src.test.reports.findbugs.class}"/>
		<findbugs home="${findbugs.home}"          output="xml"          outputFile="${src.test.reports.findbugs}/findbugs.xml"          excludeFilter="${src.test.reports.findbugs}/excludeFilter.xml"          jvmargs="-Xmx512m" >
			<auxClasspath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</auxClasspath>
			<!--fwsvfvsourcePath path="src/main/java" /-->
			<class location="${dir.dist}/LiqFiAutoPilot.jar" />
		</findbugs>
	</target>
     
    
</project>

